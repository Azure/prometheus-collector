{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "azureMonitorWorkspaceResourceId": {
      "type": "string"
    },
    "azureMonitorWorkspaceLocation": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "eastus2euap",
        "centraluseuap",
        "centralus",
        "eastus",
        "eastus2",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "uksouth",
        "westeurope",
        "westus",
        "westus2"
      ]
    },
    "clusterResourceId": {
      "type": "string"
    }
  },
  "variables": {
    "clusterName": "[split(parameters('clusterResourceId'),'/')[8]]",
    "nodeRecordingRuleGroupWin": "NodeRecordingRulesRuleGroup-Win-",
    "nodeAndKubernetesRecordingRuleGroupWin": "NodeAndKubernetesRecordingRulesRuleGroup-Win-",
    "nodeRecordingRuleGroupNameWin": "[concat(variables('nodeRecordingRuleGroupWin'), variables('clusterName'))]",
    "nodeAndKubernetesRecordingRuleGroupNameWin": "[concat(variables('nodeAndKubernetesRecordingRuleGroupWin'), variables('clusterName'))]",
    "RecordingRuleGroupDescriptionWin": "Kubernetes Recording Rules RuleGroup for Win",
    "version": " - 0.1"
  },
  "resources": [
    {
      "name": "[variables('nodeRecordingRuleGroupNameWin')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2021-07-22-preview",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('RecordingRuleGroupDescriptionWin'), variables('version'))]",
        "scopes": [
          "[parameters('azureMonitorWorkspaceResourceId')]"
        ],
        "enabled": true,
        "clusterName": "[variables('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "node:windows_node:sum",
            "expression": "count (windows_system_system_up_time{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_num_cpu:sum",
            "expression": "count by (instance) (sum by (instance, core) (windows_cpu_time_total{job=\"windows-exporter\"}))"
          },
          {
            "record": ":windows_node_cpu_utilisation:avg5m",
            "expression": "1 - avg(rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
          },
          {
            "record": "node:windows_node_cpu_utilisation:avg5m",
            "expression": "1 - avg by (instance) (rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
          },
          {
            "record": ":windows_node_memory_utilisation:",
            "expression": "1 -sum(windows_memory_available_bytes{job=\"windows-exporter\"})/sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_memory_MemFreeCached_bytes:sum",
            "expression": "sum(windows_memory_available_bytes{job=\"windows-exporter\"} + windows_memory_cache_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_totalCached_bytes:sum",
            "expression": "(windows_memory_cache_bytes{job=\"windows-exporter\"} + windows_memory_modified_page_list_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_core_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_normal_priority_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_reserve_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_memory_MemTotal_bytes:sum",
            "expression": "sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_bytes_available:sum",
            "expression": "sum by (instance) ((windows_memory_available_bytes{job=\"windows-exporter\"}))"
          },
          {
            "record": "node:windows_node_memory_bytes_total:sum",
            "expression": "sum by (instance) (windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_utilisation:ratio",
            "expression": "(node:windows_node_memory_bytes_total:sum - node:windows_node_memory_bytes_available:sum) / scalar(sum(node:windows_node_memory_bytes_total:sum))"
          },
          {
            "record": "node:windows_node_memory_utilisation:",
            "expression": "1 - (node:windows_node_memory_bytes_available:sum / node:windows_node_memory_bytes_total:sum)"
          },
          {
            "record": "node:windows_node_memory_swap_io_pages:irate",
            "expression": "irate(windows_memory_swap_page_operations_total{job=\"windows-exporter\"}[5m])"
          },
          {
            "record": ":windows_node_disk_utilisation:avg_irate",
            "expression": "avg(irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_disk_utilisation:avg_irate",
            "expression": "avg by (instance) ((irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m])))"
          }
        ]
      }
    },
    {
      "name": "[variables('nodeAndKubernetesRecordingRuleGroupNameWin')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2021-07-22-preview",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('RecordingRuleGroupDescriptionWin'), variables('version'))]",
        "scopes": [
          "[parameters('azureMonitorWorkspaceResourceId')]"
        ],
        "enabled": true,
        "clusterName": "[variables('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "node:windows_node_filesystem_usage:",
            "expression": "max by (instance,volume)((windows_logical_disk_size_bytes{job=\"windows-exporter\"} - windows_logical_disk_free_bytes{job=\"windows-exporter\"}) / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_filesystem_avail:",
            "expression": "max by (instance, volume) (windows_logical_disk_free_bytes{job=\"windows-exporter\"} / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_net_utilisation:sum_irate",
            "expression": "sum(irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_net_utilisation:sum_irate",
            "expression": "sum by (instance) ((irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m])))"
          },
          {
            "record": ":windows_node_net_saturation:sum_irate",
            "expression": "sum(irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m])) + sum(irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_net_saturation:sum_irate",
            "expression": "sum by (instance) ((irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m]) + irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m])))"
          },
          {
            "record": "windows_pod_container_available",
            "expression": "windows_container_available{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_total_runtime",
            "expression": "windows_container_cpu_usage_seconds_total{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_memory_usage",
            "expression": "windows_container_memory_usage_commit_bytes{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_private_working_set_usage",
            "expression": "windows_container_memory_usage_private_working_set_bytes{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_network_received_bytes_total",
            "expression": "windows_container_network_receive_bytes_total{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_network_transmitted_bytes_total",
            "expression": "windows_container_network_transmit_bytes_total{job=\"windows-exporter\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "kube_pod_windows_container_resource_memory_request",
            "expression": "max by (namespace, pod, container) (kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_memory_limit",
            "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_cpu_cores_request",
            "expression": "max by (namespace, pod, container) ( kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_cpu_cores_limit",
            "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "namespace_pod_container:windows_container_cpu_usage_seconds_total:sum_rate",
            "expression": "sum by (namespace, pod, container) (rate(windows_container_total_runtime{}[5m]))"
          }
        ]
      }
    }
  ]
}