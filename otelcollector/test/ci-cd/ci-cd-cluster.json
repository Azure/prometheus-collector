{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "azureMonitorWorkspaceLocation": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "eastus2euap",
        "northcentralus",
        "eastus",
        "australiacentral",
        "australiasoutheast",
        "brazilsouth",
        "canadacentral",
        "centralindia",
        "centralus",
        "eastasia",
        "eastus2",
        "northeurope",
        "norwayeast",
        "southafricanorth",
        "southcentralus",
        "southeastasia",
        "uaenorth",
        "uksouth",
        "westcentralus",
        "westeurope",
        "westus",
        "westus2",
        "francesouth",
        "germanywestcentral",
        "israelcentral",
        "italynorth",
        "japanwest",
        "koreacentral",
        "switzerlandnorth",
        "brazilsoutheast",
        "francecentral",
        "ukwest",
        "koreasouth",
        "switzerlandwest",
        "japaneast",
        "swedencentral",
        "canadaeast",
        "norwaywest",
        "southindia",
        "australiaeast",
        "swedensouth",
        "usgovvirginia"
      ]
    },
    "metricLabelsAllowlist": {
      "type": "string",
      "defaultValue": ""
    },
    "metricAnnotationsAllowList": {
      "type": "string",
      "defaultValue": ""
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "ci-dev-aks-",
      "metadata": {
        "description": "The name of the Managed Cluster resource."
      }
    },
    "clusterLocation": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "The location of the Managed Cluster resource."
      }
    },
    "windowsAdminPassword": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The password of the Windows Admin user."
      }
    }
  },
  "variables": {
    "resourceIdPrefix": "[resourceGroup().id]",
    "azureMonitorWorkspaceName": "[concat(parameters('clusterName'), '-', 'amw')]",
    "dceName": "[Concat('MSProm', '-', parameters('azureMonitorWorkspaceLocation'), '-', parameters('clusterName'))]",
    "dcrName": "[Concat('MSProm', '-', parameters('azureMonitorWorkspaceLocation'), '-', parameters('clusterName'))]",
    "dcraName": "[Concat('MSProm', '-', parameters('clusterLocation'), '-', parameters('clusterName'))]",
    "nodeRecordingRuleGroup": "NodeRecordingRulesRuleGroup-",
    "nodeRecordingRuleGroupName": "[concat(variables('nodeRecordingRuleGroup'), parameters('clusterName'))]",
    "nodeRecordingRuleGroupDescription": "Node Recording Rules RuleGroup",
    "kubernetesRecordingRuleGroup": "KubernetesRecordingRulesRuleGroup-",
    "kubernetesRecordingRuleGroupName": "[concat(variables('kubernetesRecordingRuleGroup'), parameters('clusterName'))]",
    "kubernetesRecordingRuleGroupDescription": "Kubernetes Recording Rules RuleGroup",
    "nodeRecordingRuleGroupWin": "NodeRecordingRulesRuleGroup-Win-",
    "nodeAndKubernetesRecordingRuleGroupWin": "NodeAndKubernetesRecordingRulesRuleGroup-Win-",
    "nodeRecordingRuleGroupNameWin": "[concat(variables('nodeRecordingRuleGroupWin'), parameters('clusterName'))]",
    "nodeAndKubernetesRecordingRuleGroupNameWin": "[concat(variables('nodeAndKubernetesRecordingRuleGroupWin'), parameters('clusterName'))]",
    "RecordingRuleGroupDescriptionWin": "Kubernetes Recording Rules RuleGroup for Win",
    "version": " - 0.1"
  },
  "resources": [
    {
      "type": "microsoft.monitor/accounts",
      "apiVersion": "2021-06-03-preview",
      "name": "[variables('azureMonitorWorkspaceName')]",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2024-01-01",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('clusterLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[parameters('clusterName')]",
        "windowsProfile": {
          "adminUsername": "azureuser",
          "adminPassword": "[parameters('windowsAdminPassword')]",
          "enableCSIProxy": true
        },
        "servicePrincipalProfile": {
            "clientId": "msi"
        },
        "networkProfile": {
          "networkPlugin": "azure",
          "networkDataplane": "azure",
          "loadBalancerSku": "Standard",
          "loadBalancerProfile": {
              "managedOutboundIPs": {
                  "count": 1
              },
              "backendPoolType": "nodeIPConfiguration"
          },
          "serviceCidr": "10.0.0.0/16",
          "dnsServiceIP": "10.0.0.10",
          "outboundType": "loadBalancer"
        },
        "agentPoolProfiles": [
          {
              "name": "agentpool",
              "count": 3,
              "vmSize": "Standard_D4s_v3",
              "osDiskType": "Managed",
              "kubeletDiskType": "OS",
              "maxPods": 110,
              "type": "VirtualMachineScaleSets",
              "availabilityZones": [
                  "1",
                  "2",
                  "3"
              ],
              "enableAutoScaling": false,
              "enableNodePublicIP": false,
              "mode": "System",
              "osType": "Linux",
              "osSKU": "Ubuntu",
              "enableFIPS": false
          },
          {
            "name": "agentpool",
            "count": 1,
            "vmSize": "Standard_D4s_v3",
            "osDiskType": "Managed",
            "kubeletDiskType": "OS",
            "maxPods": 110,
            "type": "VirtualMachineScaleSets",
            "availabilityZones": [
                "1",
                "2",
                "3"
            ],
            "enableAutoScaling": false,
            "enableNodePublicIP": false,
            "mode": "System",
            "osType": "Linux",
            "osSKU": "Ubuntu",
            "enableFIPS": true
        },
          {
            "name": "mariner",
            "count": 1,
            "vmSize": "Standard_D4s_v3",
            "osDiskType": "Managed",
            "kubeletDiskType": "OS",
            "maxPods": 110,
            "type": "VirtualMachineScaleSets",
            "availabilityZones": [
                "1",
                "2",
                "3"
            ],
            "enableAutoScaling": false,
            "enableNodePublicIP": false,
            "mode": "System",
            "osType": "Linux",
            "osSKU": "Mariner",
            "enableFIPS": false
          },
          {
              "name": "arm64",
              "count": 3,
              "vmSize": "Standard_D4pds_v5",
              "osDiskType": "Ephemeral",
              "kubeletDiskType": "OS",
              "maxPods": 30,
              "type": "VirtualMachineScaleSets",
              "enableAutoScaling": false,
              "mode": "User",
              "osType": "Linux",
              "osSKU": "Ubuntu",
              "upgradeSettings": {},
              "enableFIPS": false
          },
          {
            "name": "marinerarm64",
            "count": 3,
            "vmSize": "Standard_D4pds_v5",
            "osDiskType": "Ephemeral",
            "kubeletDiskType": "OS",
            "maxPods": 30,
            "type": "VirtualMachineScaleSets",
            "enableAutoScaling": false,
            "mode": "User",
            "osType": "Linux",
            "osSKU": "Mariner",
            "upgradeSettings": {},
            "enableFIPS": false
        },
          {
              "name": "win22",
              "count": 1,
              "vmSize": "Standard_D2s_v3",
              "osDiskType": "Managed",
              "kubeletDiskType": "OS",
              "workloadRuntime": "OCIContainer",
              "maxPods": 30,
              "type": "VirtualMachineScaleSets",
              "enableAutoScaling": false,
              "enableNodePublicIP": false,
              "mode": "User",
              "enableEncryptionAtHost": false,
              "enableUltraSSD": false,
              "osType": "Windows",
              "osSKU": "Windows2022",
              "upgradeSettings": {},
              "enableFIPS": false,
              "networkProfile": {}
          },
          {
              "name": "win19",
              "count": 2,
              "vmSize": "Standard_DS3_v2",
              "osDiskType": "Ephemeral",
              "kubeletDiskType": "OS",
              "maxPods": 30,
              "type": "VirtualMachineScaleSets",
              "enableAutoScaling": false,
              "enableNodePublicIP": false,
              "mode": "User",
              "osType": "Windows",
              "osSKU": "Windows2019",
              "enableFIPS": false
          }
        ],
        "azureMonitorProfile": {
          "metrics": {
            "enabled": true,
            "kubeStateMetrics": {
              "metricLabelsAllowlist": "[parameters('metricLabelsAllowlist')]",
              "metricAnnotationsAllowList": "[parameters('metricAnnotationsAllowList')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/dataCollectionEndpoints",
      "apiVersion": "2022-06-01",
      "name": "[variables('dceName')]",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "kind": "Linux",
      "properties": {}
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2022-06-01",
      "name": "[variables('dcrName')]",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "kind": "Linux",
      "properties": {
        "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints/', variables('dceName'))]",
        "dataFlows": [
          {
            "destinations": [
              "MonitoringAccount1"
            ],
            "streams": [
              "Microsoft-PrometheusMetrics"
            ]
          }
        ],
        "dataSources": {
          "prometheusForwarder": [
            {
              "name": "PrometheusDataSource",
              "streams": [
                "Microsoft-PrometheusMetrics"
              ],
              "labelIncludeFilter": {}
            }
          ]
        },
        "description": "DCR for Azure Monitor Metrics Profile (Managed Prometheus)",
        "destinations": {
          "monitoringAccounts": [
            {
              "accountResourceId": "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
              "name": "MonitoringAccount1"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints/', variables('dceName'))]",
        "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]"

      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[Concat('azuremonitormetrics-dcra', '-', uniqueString(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))))]",
      "apiVersion": "2017-05-10",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints/', variables('dceName'))]",
        "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]",
        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters/providers/dataCollectionRuleAssociations",
              "name": "[concat(parameters('clusterName'),'/microsoft.insights/', variables('dcraName'))]",
              "apiVersion": "2022-06-01",
              "location": "[parameters('clusterLocation')]",
              "properties": {
                "description": "Association of data collection rule. Deleting this association will break the data collection for this AKS Cluster.",
                "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dcrName'))]"
              }
            }
          ]
        },
        "parameters": {}
      }
    },

    
    {
      "name": "[variables('nodeRecordingRuleGroupName')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-03-01",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('nodeRecordingRuleGroupDescription'), variables('version'))]",
        "scopes": [
          "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
        ],
        "clusterName": "[parameters('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "instance:node_num_cpu:sum",
            "expression": "count without (cpu, mode) (  node_cpu_seconds_total{job=\"node\",mode=\"idle\"})"
          },
          {
            "record": "instance:node_cpu_utilisation:rate5m",
            "expression": "1 - avg without (cpu) (  sum without (mode) (rate(node_cpu_seconds_total{job=\"node\", mode=~\"idle|iowait|steal\"}[5m])))"
          },
          {
            "record": "instance:node_load1_per_cpu:ratio",
            "expression": "(  node_load1{job=\"node\"}/  instance:node_num_cpu:sum{job=\"node\"})"
          },
          {
            "record": "instance:node_memory_utilisation:ratio",
            "expression": "1 - (  (    node_memory_MemAvailable_bytes{job=\"node\"}    or    (      node_memory_Buffers_bytes{job=\"node\"}      +      node_memory_Cached_bytes{job=\"node\"}      +      node_memory_MemFree_bytes{job=\"node\"}      +      node_memory_Slab_bytes{job=\"node\"}    )  )/  node_memory_MemTotal_bytes{job=\"node\"})"
          },
          {
            "record": "instance:node_vmstat_pgmajfault:rate5m",
            "expression": "rate(node_vmstat_pgmajfault{job=\"node\"}[5m])"
          },
          {
            "record": "instance_device:node_disk_io_time_seconds:rate5m",
            "expression": "rate(node_disk_io_time_seconds_total{job=\"node\", device!=\"\"}[5m])"
          },
          {
            "record": "instance_device:node_disk_io_time_weighted_seconds:rate5m",
            "expression": "rate(node_disk_io_time_weighted_seconds_total{job=\"node\", device!=\"\"}[5m])"
          },
          {
            "record": "instance:node_network_receive_bytes_excluding_lo:rate5m",
            "expression": "sum without (device) (  rate(node_network_receive_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_transmit_bytes_excluding_lo:rate5m",
            "expression": "sum without (device) (  rate(node_network_transmit_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_receive_drop_excluding_lo:rate5m",
            "expression": "sum without (device) (  rate(node_network_receive_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
          },
          {
            "record": "instance:node_network_transmit_drop_excluding_lo:rate5m",
            "expression": "sum without (device) (  rate(node_network_transmit_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
          }
        ]
      }
    },
    {
      "name": "[variables('kubernetesRecordingRuleGroupName')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-03-01",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('kubernetesRecordingRuleGroupDescription'), variables('version'))]",
        "scopes": [
          "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
        ],
        "clusterName": "[parameters('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
            "expression": "sum by (cluster, namespace, pod, container) (  irate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\"}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (  1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_working_set_bytes",
            "expression": "container_memory_working_set_bytes{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_rss",
            "expression": "container_memory_rss{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_cache",
            "expression": "container_memory_cache{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "node_namespace_pod_container:container_memory_swap",
            "expression": "container_memory_swap{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
          },
          {
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_requests",
            "expression": "kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_memory:kube_pod_container_resource_requests:sum",
            "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
          },
          {
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests",
            "expression": "kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_cpu:kube_pod_container_resource_requests:sum",
            "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
          },
          {
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_limits",
            "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
          },
          {
            "record": "namespace_memory:kube_pod_container_resource_limits:sum",
            "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
          },
          {
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits",
            "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ( (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1) )"
          },
          {
            "record": "namespace_cpu:kube_pod_container_resource_limits:sum",
            "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    label_replace(      kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"},      \"replicaset\", \"$1\", \"owner_name\", \"(.*)\"    ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (      1, max by (replicaset, namespace, owner_name) (        kube_replicaset_owner{job=\"kube-state-metrics\"}      )    ),    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
            "labels": {
              "workload_type": "deployment"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
            "labels": {
              "workload_type": "daemonset"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
            "labels": {
              "workload_type": "statefulset"
            }
          },
          {
            "record": "namespace_workload_pod:kube_pod_owner:relabel",
            "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"Job\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
            "labels": {
              "workload_type": "job"
            }
          },
          {
            "record": ":node_memory_MemAvailable_bytes:sum",
            "expression": "sum(  node_memory_MemAvailable_bytes{job=\"node\"} or  (    node_memory_Buffers_bytes{job=\"node\"} +    node_memory_Cached_bytes{job=\"node\"} +    node_memory_MemFree_bytes{job=\"node\"} +    node_memory_Slab_bytes{job=\"node\"}  )) by (cluster)"
          },
          {
            "record": "cluster:node_cpu:ratio_rate5m",
            "expression": "sum(rate(node_cpu_seconds_total{job=\"node\",mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m])) by (cluster) /count(sum(node_cpu_seconds_total{job=\"node\"}) by (cluster, instance, cpu)) by (cluster)"
          }
        ]
      }
    },
    {
      "name": "[variables('nodeRecordingRuleGroupNameWin')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-03-01",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('RecordingRuleGroupDescriptionWin'), variables('version'))]",
        "scopes": [
          "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
        ],
        "enabled": "true",
        "clusterName": "[parameters('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "node:windows_node:sum",
            "expression": "count (windows_system_system_up_time{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_num_cpu:sum",
            "expression": "count by (instance) (sum by (instance, core) (windows_cpu_time_total{job=\"windows-exporter\"}))"
          },
          {
            "record": ":windows_node_cpu_utilisation:avg5m",
            "expression": "1 - avg(rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
          },
          {
            "record": "node:windows_node_cpu_utilisation:avg5m",
            "expression": "1 - avg by (instance) (rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
          },
          {
            "record": ":windows_node_memory_utilisation:",
            "expression": "1 -sum(windows_memory_available_bytes{job=\"windows-exporter\"})/sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_memory_MemFreeCached_bytes:sum",
            "expression": "sum(windows_memory_available_bytes{job=\"windows-exporter\"} + windows_memory_cache_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_totalCached_bytes:sum",
            "expression": "(windows_memory_cache_bytes{job=\"windows-exporter\"} + windows_memory_modified_page_list_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_core_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_normal_priority_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_reserve_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_memory_MemTotal_bytes:sum",
            "expression": "sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_bytes_available:sum",
            "expression": "sum by (instance) ((windows_memory_available_bytes{job=\"windows-exporter\"}))"
          },
          {
            "record": "node:windows_node_memory_bytes_total:sum",
            "expression": "sum by (instance) (windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_memory_utilisation:ratio",
            "expression": "(node:windows_node_memory_bytes_total:sum - node:windows_node_memory_bytes_available:sum) / scalar(sum(node:windows_node_memory_bytes_total:sum))"
          },
          {
            "record": "node:windows_node_memory_utilisation:",
            "expression": "1 - (node:windows_node_memory_bytes_available:sum / node:windows_node_memory_bytes_total:sum)"
          },
          {
            "record": "node:windows_node_memory_swap_io_pages:irate",
            "expression": "irate(windows_memory_swap_page_operations_total{job=\"windows-exporter\"}[5m])"
          },
          {
            "record": ":windows_node_disk_utilisation:avg_irate",
            "expression": "avg(irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_disk_utilisation:avg_irate",
            "expression": "avg by (instance) ((irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m])))"
          }
        ]
      }
    },
    {
      "name": "[variables('nodeAndKubernetesRecordingRuleGroupNameWin')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-03-01",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
        "description": "[concat(variables('RecordingRuleGroupDescriptionWin'), variables('version'))]",
        "scopes": [
          "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
          "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
        ],
        "enabled": "true",
        "clusterName": "[parameters('clusterName')]",
        "interval": "PT1M",
        "rules": [
          {
            "record": "node:windows_node_filesystem_usage:",
            "expression": "max by (instance,volume)((windows_logical_disk_size_bytes{job=\"windows-exporter\"} - windows_logical_disk_free_bytes{job=\"windows-exporter\"}) / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": "node:windows_node_filesystem_avail:",
            "expression": "max by (instance, volume) (windows_logical_disk_free_bytes{job=\"windows-exporter\"} / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
          },
          {
            "record": ":windows_node_net_utilisation:sum_irate",
            "expression": "sum(irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_net_utilisation:sum_irate",
            "expression": "sum by (instance) ((irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m])))"
          },
          {
            "record": ":windows_node_net_saturation:sum_irate",
            "expression": "sum(irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m])) + sum(irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m]))"
          },
          {
            "record": "node:windows_node_net_saturation:sum_irate",
            "expression": "sum by (instance) ((irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m]) + irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m])))"
          },
          {
            "record": "windows_pod_container_available",
            "expression": "windows_container_available{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_total_runtime",
            "expression": "windows_container_cpu_usage_seconds_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_memory_usage",
            "expression": "windows_container_memory_usage_commit_bytes{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_private_working_set_usage",
            "expression": "windows_container_memory_usage_private_working_set_bytes{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_network_received_bytes_total",
            "expression": "windows_container_network_receive_bytes_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "windows_container_network_transmitted_bytes_total",
            "expression": "windows_container_network_transmit_bytes_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
          },
          {
            "record": "kube_pod_windows_container_resource_memory_request",
            "expression": "max by (namespace, pod, container) (kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_memory_limit",
            "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_cpu_cores_request",
            "expression": "max by (namespace, pod, container) ( kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "kube_pod_windows_container_resource_cpu_cores_limit",
            "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
          },
          {
            "record": "namespace_pod_container:windows_container_cpu_usage_seconds_total:sum_rate",
            "expression": "sum by (namespace, pod, container) (rate(windows_container_total_runtime{}[5m]))"
          }
        ]
      }
    },


    {
      "name": "[Concat(parameters('clusterName'), '-dev-alerts')]",
      "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
      "apiVersion": "2023-03-01",
      "location": "[parameters('azureMonitorWorkspaceLocation')]",
      "properties": {
          "description": "[Concat('Rule group for cluster', parameters('clusterName'), 'in the workspace', variables('azureMonitorWorkspaceName')]",
          "scopes": [
              "[resourceId('microsoft.monitor/accounts/', variables('azureMonitorWorkspaceName'))]",
              "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
          ],
          "enabled": "false",
          "clusterName": "[parameters('clusterName')]",
          "rules": [
              {
                  "alert": "[Concat('Amd64 metric missing in cluster', parameters('clusterName'))]",
                  "expression": "absent(node_uname_info{machine=\"x86_64\"}) == 1 or node_uname_info{machine=\"x86_64\"} == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('Amd64 metric missing in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = node in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"node\"}[30m]) == 1 or count(up{job=\"node\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = node in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kubelet in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kubelet\"}[30m]) == 1 or count(up{job=\"kubelet\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kubelet in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = windows-exporter in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"windows-exporter\"}[30m]) == 1 or count(up{job=\"windows-exporter\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = windows-exporter in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kube-proxy in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kube-proxy\"}[30m]) == 1 or count(up{job=\"kube-proxy\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kube-proxy in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kube-apiserver in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kube-apiserver\"}[30m]) == 1 or count(up{job=\"kube-apiserver\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kube-apiserver in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kube-proxy-windows in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kube-proxy-windows\"}[30m]) == 1 or count(up{job=\"kube-proxy-windows\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kube-proxy-windows in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kube-state-metrics in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kube-state-metrics\"}[30m]) == 1 or count(up{job=\"kube-state-metrics\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kube-state-metrics in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = cadvisor in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"cadvisor\"}[30m]) == 1 or count(up{job=\"cadvisor\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = cadvisor in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('up metric missing for target = kube-dns in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(up{job=\"kube-dns\"}[30m]) == 1 or count(up{job=\"kube-dns\"} == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('up metric missing for target = kube-dns in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "Concat['CPU usage % greater than 75 for prometheus-collector on cluster', parameters('clusterName')]",
                  "expression": "sum(sum by (cluster, namespace, pod, container) ( rate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\", namespace=\"kube-system\", container=\"prometheus-collector\"}[5m]) ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) ( 1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\", namespace=\"kube-system\"}) )) by (container, pod) *100 > 75",
                  "for": "PT3M",
                  "annotations": {
                      "description": "Concat['CPU usage greater than 75% for prometheus-collector on cluster', parameters('clusterName')]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('Memory usage greater than 75% for prometheus-collector containers on cluster', parameters('clusterName'))]",
                  "expression": "(sum(container_memory_working_set_bytes{namespace=\"kube-system\", container=\"prometheus-collector\", image!=\"\"}) by (container, pod) / sum(kube_pod_container_resource_limits{namespace=\"kube-system\", container=\"prometheus-collector\", resource=\"memory\"}) by (container, pod)) * 100> 75",
                  "for": "PT3M",
                  "annotations": {
                      "description": "[Concat('Memory usage greater than 75% for prometheus-collector containers on cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              },
              {
                  "alert": "[Concat('Custom job metric missing for target = prometheus_ref_app in cluster', parameters('clusterName'))]",
                  "expression": "absent_over_time(myapp_rainfall_histogram_sum[30m]) == 1 or count(myapp_rainfall_histogram_sum == 1) == 0",
                  "for": "PT30M",
                  "annotations": {
                      "description": "[Concat('Custom job metric missing for target = prometheus_ref_app in cluster', parameters('clusterName'))]"
                  },
                  "severity": 4,
                  "resolveConfiguration": {
                      "autoResolved": true,
                      "timeToResolve": "PT10M"
                  },
                  "actions": [
                      {
                          "actionGroupId": "/subscriptions/13d371f9-5a39-46d5-8e1b-60158c49db84/resourceGroups/ContainerInsightsPrometheusCollector-Prod/providers/microsoft.insights/actiongroups/AMA-PrometheusCollectorAlertGroup"
                      }
                  ]
              }
          ]
      }
    }
  ],
  "outputs": {}
}
