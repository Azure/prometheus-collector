# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  #Below are entirely used for telemetry
  agentVersion = "$AGENT_VERSION"
  cluster = "$customResourceId"
  #region = "$AKS_REGION"
  computer = "$NODE_NAME"
  controllerType = "$CONTROLLER_TYPE"

  #hostName = "placeholder_hostname"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "60s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "15s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = true
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  #hostname = "placeholder_hostname"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.application_insights]]
  ## Instrumentation key of the Application Insights resource.
  instrumentation_key = "$TELEMETRY_APPLICATIONINSIGHTS_KEY"

  ## Timeout for closing (default: 5s).
  # timeout = "5s"

  ## Enable additional diagnostic logging.
  # enable_diagnostic_logging = false

###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################
[[processors.converter]]
  [processors.converter.fields]
    float = ["*"]

###############################################################################
#                            AGGREGATOR PLUGINS                               #
###############################################################################
[[aggregators.quantile]]
  period = "5m"
  drop_original = true
  quantiles = [0.50,0.95]
  algorithm = "t-digest"
  compression = 100.0
 
###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
#[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
#  percpu = false
  ## Whether to report total system cpu stats or not
#  totalcpu = true
  ## If true, collect raw CPU time metrics.
#  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
#  report_active = true
#  fieldpass = ["usage_active","cluster","node","host","device"]
#  taginclude = ["cluster","cpu","node"]
  
# Read metrics about memory usage
#[[inputs.mem]]
#  fieldpass = ["used_percent", "cluster", "node","host","device"]
#  taginclude = ["cluster","node"]

[[inputs.procstat]]
   exe = "otelcollector"
   interval = "10s"
   pid_finder = "native"
   pid_tag = true
   name_override = "otelcollector"
   fieldpass = ["cpu_usage", "memory_rss"]
   [inputs.procstat.tags]
#    Computer = "$NODE_NAME"
#    NodeIp = "$NODE_IP"
    cpuLimit = "$CONTAINER_CPU_LIMIT"
    memLimit = "$CONTAINER_MEMORY_LIMIT"
    defaultMetricAccountName = "$AZMON_DEFAULT_METRIC_ACCOUNT_NAME"
    defaultPromConfig = "$AZMON_USE_DEFAULT_PROMETHEUS_CONFIG"
    defaultScrapeKubelet = "AZMON_PROMETHEUS_KUBELET_SCRAPING_ENABLED"
    defaultScrapeCoreDns = "AZMON_PROMETHEUS_CORE_DNS_SCRAPING_ENABLED"
[[inputs.procstat]]
   exe = "MetricsExtension"
   interval = "10s"
   pid_finder = "native"
   pid_tag = true
   name_override = "metricsextension"
   fieldpass = ["cpu_usage", "memory_rss"]
