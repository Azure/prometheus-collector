apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: opentelemetry-targetallocator
    app.kubernetes.io/instance: kube-system.ama-metrics-otelcollector
    app.kubernetes.io/name: ama-metrics-otelcollector-targetallocator
    app.kubernetes.io/part-of: opentelemetry
  name: ama-metrics-otelcollector-targetallocator
  namespace: kube-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: opentelemetry-targetallocator
      app.kubernetes.io/instance: kube-system.ama-metrics-otelcollector
      app.kubernetes.io/name: ama-metrics-otelcollector-targetallocator
      app.kubernetes.io/part-of: opentelemetry
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: opentelemetry-targetallocator
        app.kubernetes.io/instance: kube-system.ama-metrics-otelcollector
        app.kubernetes.io/name: ama-metrics-otelcollector-targetallocator
        app.kubernetes.io/part-of: opentelemetry
    spec:
      containers:
      - name: ta-container
        args:
        - --enable-prometheus-cr-watcher
        env:
        - name: OTELCOL_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: ghcr.io/open-telemetry/opentelemetry-operator/target-allocator:0.76.1
        imagePullPolicy: IfNotPresent
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /conf
          name: ta-internal
      - name: config-reader
        env:
        - name: CONTAINER_TYPE
          value: "ConfigReaderSidecar"
        - name: MODE
          value: "advanced" # only supported mode is 'advanced', any other value will be the default/non-advance mode
        - name: MAC
          value: "true"
        - name: KUBE_STATE_NAME
          value: ama-metrics-ksm
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_EXPORTER_NAME
          value: "" # Replace this with the node exporter shipped out of box with AKS
        image: "mcr.microsoft.com{{ .Values.AzureMonitorMetrics.ImageRepository }}:{{ .Values.AzureMonitorMetrics.ImageTagCfg }}"
        imagePullPolicy: IfNotPresent
        resources: {}
        volumeMounts:
          - mountPath: /etc/config/settings
            name: settings-vol-config
            readOnly: true
          - mountPath: /etc/config/settings/prometheus
            name: prometheus-config-vol
            readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: ama-metrics-serviceaccount
      serviceAccountName: ama-metrics-serviceaccount
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ta-internal
        configMap:
          defaultMode: 420
          items:
          - key: targetallocator.yaml
            path: targetallocator.yaml
          name: ama-metrics-otelcollector-targetallocator
      - name: settings-vol-config
        configMap:
          name: ama-metrics-settings-configmap
          optional: true
      - name: prometheus-config-vol
        configMap:
          name: ama-metrics-prometheus-config
          optional: true