{{- $arcExtensionSettings := include "arc-extension-settings" . | fromYaml }}
{{/* Get sizes */}}
{{- $useDaemonSetSizing := and .Values.global.commonGlobals.isAutomaticSKU .Values.AzureMonitorMetrics.enableDaemonSetSizing -}}
{{- $singleSize := dict "containers" (dict "addon-token-adapter" (dict "cpuLimit" "500m" "memoryLimit" "500Mi" "cpuRequest" "20m" "memoryRequest" "30Mi") "prometheus-collector" (dict "cpuLimit" .Values.AzureMonitorMetrics.DsCPULimitLinux "memoryLimit" .Values.AzureMonitorMetrics.DsMemoryLimitLinux "cpuRequest" .Values.AzureMonitorMetrics.DsCPURequestLinux "memoryRequest" .Values.AzureMonitorMetrics.DsMemoryRequestLinux)) -}}
{{- $sizes := list ($singleSize) -}}
{{- if $useDaemonSetSizing -}}
  {{- $singleSize = .Values.AzureMonitorMetrics.daemonSetSizingValues.singleSize -}}
  {{- $sizes = list ($singleSize) -}}
  {{- $sizes = prepend .Values.AzureMonitorMetrics.daemonSetSizingValues.tShirtSizes $singleSize -}}
{{- end -}}
{{/* Generate DaemonSets */}}
{{- $prevMaxCPU := 0 -}}
{{- range $index, $size := $sizes -}}
{{- if gt $index 0 }}
---
{{ end -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ama-metrics-node{{- if and $useDaemonSetSizing $size.name }}-{{ $size.name }}{{- end }}
  namespace: kube-system
  labels:
    component: ama-metrics
    kubernetes.azure.com/managedby: aks
    {{- if and $useDaemonSetSizing $size.name }}
    kubernetes.azure.com/ds-tshirt-size: {{ $size.name }}
    {{- end }}
spec:
  selector:
    matchLabels:
      dsName: ama-metrics-node
      {{- if and $useDaemonSetSizing $size.name }}
      kubernetes.azure.com/ds-tshirt-size: {{ $size.name }}
      {{- end }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        dsName: ama-metrics-node
        kubernetes.azure.com/managedby: aks
        {{- if and $useDaemonSetSizing $size.name }}
        kubernetes.azure.com/ds-tshirt-size: {{ $size.name }}
        {{- end }}
      annotations:
        agentVersion: "0.0.0.1"
        schema-versions: "v1"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: ama-metrics-serviceaccount
      containers:
        - name: prometheus-collector
          image: "{{ $.Values.AzureMonitorMetrics.ImageRegistry }}{{ $.Values.AzureMonitorMetrics.ImageRepository }}:{{ $.Values.AzureMonitorMetrics.ImageTag }}"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              {{- $containerResources := index $size.containers "prometheus-collector" }}
              cpu: {{ $containerResources.cpuLimit }}
              memory: {{ $containerResources.memoryLimit }}
            requests:
              cpu: {{ $containerResources.cpuRequest }}
              memory: {{ $containerResources.memoryRequest }}
          {{- if $arcExtensionSettings.isProxyEnabled }}
          envFrom:
            - secretRef:
                name: ama-metrics-proxy-config
          {{- end }}
          env:
            - name: CLUSTER
              {{- if $arcExtensionSettings.isArcExtension }}
              value: "{{ $arcExtensionSettings.resourceId }}"
              {{- else }}
              value: "{{ $.Values.global.commonGlobals.Customer.AzureResourceID }}"
              {{- end }}
            - name: AKSREGION
              {{- if $arcExtensionSettings.isArcExtension }}
              value: "{{ $arcExtensionSettings.region }}"
              {{- else }}
              value: "{{ $.Values.global.commonGlobals.Region }}"
              {{- end }}
            - name: MAC
              value: "true"
            - name: AZMON_COLLECT_ENV
              value: "false"
            - name: customEnvironment
              {{- if $.Values.AzureMonitorMetrics.isArcACluster }}
              value: "arcautonomous"
              {{- else if $arcExtensionSettings.isArcExtension }}
              value: "{{ $arcExtensionSettings.cloudEnvironment }}"
              {{- else }}
              value: "{{ lower $.Values.global.commonGlobals.CloudEnvironment }}"
              {{- end }}
            - name: OMS_TLD
              value: "opinsights.azure.com"
              {{- if eq $.Values.AzureMonitorMetrics.isArcACluster true }}
            - name: customRegionalEndpoint
              value: {{ required "customRegionalEndpoint is required in Arc Autonomous" $.Values.AzureMonitorMetrics.arcAutonomousSettings.customRegionalEndpoint | toString | trim | quote }}
            - name: customGlobalEndpoint
              value: {{ required "customGlobalEndpoint is required in Arc Autonomous" $.Values.AzureMonitorMetrics.arcAutonomousSettings.customGlobalEndpoint | toString | trim | quote }}
            - name: customResourceEndpoint
              value: {{ required "customResourceEndpoint is required in Arc Autonomous" .Values.AzureMonitorMetrics.arcAutonomousSettings.customResourceEndpoint | toString | trim | quote }}
              {{- end }}
            - name: CONTROLLER_TYPE
              value: "DaemonSet"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONTAINER_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.cpu
                  divisor: 1m
            - name: CONTAINER_MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.memory
                  divisor: 1Mi
            - name: KUBE_STATE_NAME
              value: ama-metrics-ksm
            - name: NODE_EXPORTER_NAME
              value: "" # Replace this with the node exporter shipped out of box with AKS
            - name: NODE_EXPORTER_TARGETPORT
              {{- if $arcExtensionSettings.isArcExtension }}
              value: "{{ $arcExtensionSettings.nodeExporterTargetPort }}"
              {{- else }}
              value: "19100"
              {{- end }}
              {{- if $.Values.AzureMonitorMetrics }}
              {{- if $.Values.AzureMonitorMetrics.KubeStateMetrics }}
            - name: KUBE_STATE_VERSION
              value: "{{ $.Values.AzureMonitorMetrics.KubeStateMetrics.ImageRegistry }}{{ $.Values.AzureMonitorMetrics.KubeStateMetrics.ImageRepository }}:{{ $.Values.AzureMonitorMetrics.KubeStateMetrics.ImageTag }}"
              {{-  end  }}
            {{-  end  }}
            - name: NODE_EXPORTER_VERSION
              {{- if $arcExtensionSettings.isArcExtension }}
              value: {{ $arcExtensionSettings.nodeExporterVersion }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AGENT_VERSION
              value: {{ $.Values.AzureMonitorMetrics.ImageTag }}
            - name: MODE
              value: "advanced" # only supported mode is 'advanced', any other value will be the default/non-advance mode
            - name: WINMODE
              value: "advanced" # WINDOWS: only supported mode is 'advanced', any other value will be the default/non-advance mode
            - name: MINIMAL_INGESTION_PROFILE
              value: "true" # only supported value is the string "true"
            - name: APPMONITORING_AUTOINSTRUMENTATION_ENABLED
              value: "{{ $.Values.AppmonitoringAgent.enabled }}"
            - name: APPMONITORING_OPENTELEMETRYMETRICS_ENABLED
              value: "{{ $.Values.AppmonitoringAgent.isOpenTelemetryMetricsEnabled | default false }}"
            - name: APPMONITORING_OPENTELEMETRYMETRICS_PORT
              value: "{{ $.Values.AppmonitoringAgent.openTelemetryMetricsPort | default 28333 }}"
          {{- if $.Values.AppmonitoringAgent.isOpenTelemetryMetricsEnabled | default false }}
          ports:
            - name: otlp-http-port
              containerPort: 56681
              hostPort: {{ $.Values.AppmonitoringAgent.openTelemetryMetricsPort | default 28333 }}
              protocol: TCP
            - name: otlp-grpc-port
              containerPort: 56680
              hostPort: 28334
              protocol: TCP
          {{- end }}
          securityContext:
            privileged: false
            capabilities:
              drop:
                - ALL
              add:
                - DAC_OVERRIDE
          volumeMounts:
            - mountPath: /etc/config/settings
              name: settings-vol-config
              readOnly: true
            - mountPath: /etc/prometheus/certs
              name: ama-metrics-tls-secret-volume
              readOnly: true
            - mountPath: /etc/config/settings/prometheus
              name: prometheus-config-vol
              readOnly: true
            - name: host-log-containers
              readOnly: true
              mountPath: /var/log/containers
            - name: host-log-pods
              readOnly: true
              mountPath: /var/log/pods
            {{- if or (not $arcExtensionSettings.isArcExtension) $arcExtensionSettings.mountMarinerCerts }}
            - mountPath: /anchors/mariner
              name: anchors-mariner
              readOnly: true
            {{- end }}
            {{- if or (not $arcExtensionSettings.isArcExtension) $arcExtensionSettings.mountUbuntuCerts }}
            - mountPath: /anchors/ubuntu
              name: anchors-ubuntu
              readOnly: true
            {{- end }}
            {{- if $arcExtensionSettings.isArcExtension }}
            - mountPath: /anchors/proxy
              name: ama-metrics-proxy-cert
              readOnly: true
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
        {{- if $arcExtensionSettings.isArcExtension }}
        - name: arc-msi-adapter
          imagePullPolicy: IfNotPresent
          env:
          - name: TOKEN_NAMESPACE
            value: "azure-arc"
          - name: LIVENESS_PROBE_PORT
            value: "9999"
          {{-  .Values.Azure.Identity.MSIAdapterYaml | nindent 10 }}
        {{- else }}
        - name: addon-token-adapter
          command:
            - /addon-token-adapter
          args:
            - --secret-namespace=kube-system
            - --secret-name=aad-msi-auth-token
            - --token-server-listening-port=7777
            - --health-server-listening-port=9999
            - --restart-pod-waiting-minutes-on-broken-connection=240
          image: "{{ $.Values.AzureMonitorMetrics.AddonTokenAdapter.ImageRegistry }}{{ $.Values.AzureMonitorMetrics.AddonTokenAdapter.ImageRepository }}:{{ $.Values.AzureMonitorMetrics.AddonTokenAdapter.ImageTag }}"
          imagePullPolicy: IfNotPresent
          env:
            - name: AZMON_COLLECT_ENV
              value: "false"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9999
            initialDelaySeconds: 10
            periodSeconds: 60
          resources:
            limits:
              {{- $containerResources := index $size.containers "addon-token-adapter" }}
              cpu: {{ $containerResources.cpuLimit }}
              memory: {{ $containerResources.memoryLimit }}
            requests:
              cpu: {{ $containerResources.cpuRequest }}
              memory: {{ $containerResources.memoryRequest }}
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_ADMIN
                - NET_RAW
        {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: type
                    operator: NotIn
                    values:
                      - virtual-kubelet
                  {{- if not $arcExtensionSettings.isArcExtension }}
                  - key: kubernetes.azure.com/cluster
                    operator: Exists
                  {{- end }}
                  {{- if $useDaemonSetSizing -}}
                  {{- if eq $size.name $singleSize.name -}}
                  {{/* Target non-Karpenter nodes */}}
                  - key: karpenter.azure.com/aksnodeclass
                    operator: DoesNotExist
                  {{- else }}
                  {{/* Target Karpenter nodes with CPU range */}}
                  {{- if gt $prevMaxCPU 0 -}}
                  - key: karpenter.azure.com/sku-cpu
                    operator: Gt
                    values:
                    - "{{ $prevMaxCPU }}"
                  {{- end -}}
                  {{/* Add new line. */}}
                  {{- if and $prevMaxCPU $size.maxCPU }}
                  {{ end -}}
                  {{- if $size.maxCPU -}}
                  - key: karpenter.azure.com/sku-cpu
                    operator: Lt
                    values:
                    - "{{ add ($size.maxCPU | int) 1 }}"
                  {{- end -}}
                  {{- end -}}
                  {{- end }}
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        {{- if or (not $arcExtensionSettings.isArcExtension) (eq (default $.Values.tolerationsOnlyForControlPlane false) false) }}
        - operator: "Exists"
          effect: "NoSchedule"
        - operator: "Exists"
          effect: "NoExecute"
        {{- end }}
          {{- if $arcExtensionSettings.isArcExtension }}
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "PreferNoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "PreferNoSchedule"
          {{- end }}
      volumes:
        - name: settings-vol-config
          configMap:
            name: ama-metrics-settings-configmap
            optional: true
        - name: ama-metrics-tls-secret-volume
          secret:
            secretName: ama-metrics-mtls-secret
            optional: true
        - name: prometheus-config-vol
          configMap:
            name: ama-metrics-prometheus-config-node
            optional: true
        - name: host-log-containers
          hostPath:
            path: /var/log/containers
        - name: host-log-pods
          hostPath:
            path: /var/log/pods
        {{- if or (not $arcExtensionSettings.isArcExtension) $arcExtensionSettings.mountMarinerCerts }}
        - name: anchors-mariner
          hostPath:
            path: /etc/pki/ca-trust/source/anchors/
            type: DirectoryOrCreate
        {{- end }}
        {{- if or (not $arcExtensionSettings.isArcExtension) $arcExtensionSettings.mountUbuntuCerts }}
        - name: anchors-ubuntu
          hostPath:
            path: /usr/local/share/ca-certificates/
            type: DirectoryOrCreate
        {{- end }}
        {{- if $arcExtensionSettings.isArcExtension }}
        - name: ama-metrics-proxy-cert
          secret:
            secretName: ama-metrics-proxy-cert
            optional: true
        {{- end }}
{{- if and (ne (default "" $size.name) (default "" $singleSize.name)) $size.maxCPU }}
{{- $prevMaxCPU = $size.maxCPU | int }}
{{- end }}
{{- end }}
{{- if not $arcExtensionSettings.isArcExtension }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ama-metrics-win-node
  namespace: kube-system
  labels:
    component: ama-metrics
    kubernetes.azure.com/managedby: aks
spec:
  selector:
    matchLabels:
      dsName: ama-metrics-win-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        dsName: ama-metrics-win-node
        kubernetes.azure.com/managedby: aks
      annotations:
        agentVersion: "0.0.0.1"
        schema-versions: "v1"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: ama-metrics-serviceaccount
      containers:
        - name: prometheus-collector
          image: "{{ .Values.AzureMonitorMetrics.ImageRegistry }}{{ .Values.AzureMonitorMetrics.ImageRepository }}:{{ .Values.AzureMonitorMetrics.ImageTagWin }}"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu:  {{ .Values.AzureMonitorMetrics.DsCPULimitWindows }}
              memory: {{ .Values.AzureMonitorMetrics.DsMemoryLimitWindows }}
          env:
            - name: CLUSTER
              value: "{{ .Values.global.commonGlobals.Customer.AzureResourceID }}"
            - name: AKSREGION
              value: "{{ .Values.global.commonGlobals.Region }}"
            - name: MAC
              value: "true"
            - name: AZMON_COLLECT_ENV
              value: "false"
            - name: customEnvironment
              value: "{{ .Values.global.commonGlobals.CloudEnvironment | lower }}"
            - name: OMS_TLD
              value: "opinsights.azure.com"
            - name: CONTROLLER_TYPE
              value: "DaemonSet"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONTAINER_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.cpu
                  divisor: 1m
            - name: CONTAINER_MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: prometheus-collector
                  resource: limits.memory
                  divisor: 1Mi
            - name: KUBE_STATE_NAME
              value: ama-metrics-ksm
            - name: NODE_EXPORTER_NAME
              value: "" # Replace this with the node exporter shipped out of box with AKS
            - name: NODE_EXPORTER_TARGETPORT
              value: "19100"
            {{- if .Values.AzureMonitorMetrics }}
              {{- if .Values.AzureMonitorMetrics.KubeStateMetrics }}
            - name: KUBE_STATE_VERSION
              value: "{{ .Values.AzureMonitorMetrics.KubeStateMetrics.ImageRegistry }}{{ .Values.AzureMonitorMetrics.KubeStateMetrics.ImageRepository }}:{{ .Values.AzureMonitorMetrics.KubeStateMetrics.ImageTagWin }}"
              {{-  end  }}
            {{-  end  }}
            - name: NODE_EXPORTER_VERSION
              value: "" # Replace this with the version shipped by default
            - name: AGENT_VERSION
              value: {{ .Values.AzureMonitorMetrics.ImageTagWin }}
            - name: MODE
              value: "advanced" # only supported mode is 'advanced', any other value will be the default/non-advance mode
            - name: WINMODE
              value: "advanced" # WINDOWS: only supported mode is 'advanced', any other value will be the default/non-advance mode
            - name: MINIMAL_INGESTION_PROFILE
              value: "true" # only supported value is the string "true"
            - name: APPMONITORING_AUTOINSTRUMENTATION_ENABLED
              value: "{{ .Values.AppmonitoringAgent.enabled }}"
            - name: APPMONITORING_OPENTELEMETRYMETRICS_ENABLED
              value: "{{ .Values.AppmonitoringAgent.isOpenTelemetryMetricsEnabled | default false }}"
            - name: APPMONITORING_OPENTELEMETRYMETRICS_PORT
              value: "{{ .Values.AppmonitoringAgent.openTelemetryMetricsPort | default 28333 }}"
          {{- if .Values.AppmonitoringAgent.isOpenTelemetryMetricsEnabled | default false }}
          ports:
            - name: otlp-http-port
              containerPort: 56681
              hostPort: {{ .Values.AppmonitoringAgent.openTelemetryMetricsPort | default 28333 }}
              protocol: TCP
            - name: otlp-grpc-port
              containerPort: 56680
              hostPort: 28334
              protocol: TCP
          {{- end }}
          securityContext:
            privileged: false
            capabilities:
              drop:
                - ALL
              add:
                - DAC_OVERRIDE
          volumeMounts:
            - mountPath: /etc/config/settings
              name: settings-vol-config
              readOnly: true
            - mountPath: /etc/config/settings/prometheus
              name: prometheus-config-vol
              readOnly: true
            - mountPath: /etc/prometheus/certs
              name: ama-metrics-tls-secret-volume
              readOnly: true
            - name: host-log-containers
              readOnly: true
              mountPath: /var/log/containers
            - name: host-log-pods
              readOnly: true
              mountPath: /var/log/pods
          {{- $cloudEnv := lower .Values.global.commonGlobals.CloudEnvironment }}
          {{- if or (eq $cloudEnv "usnat") (eq $cloudEnv "ussec") (eq $cloudEnv "bleu") }}
            - mountPath: C:\ca
              name: ca-certs
              readOnly: true
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            periodSeconds: 60
            initialDelaySeconds: 300
            timeoutSeconds: 60
            failureThreshold: 3
        - name: addon-token-adapter-win
          command:
           - addon-token-adapter-win
          args:
           - --secret-namespace=kube-system
           - --secret-name=aad-msi-auth-token
           - --token-server-listening-port=7777
           - --health-server-listening-port=9999
           - --restart-pod-waiting-minutes-on-broken-connection=240
          image: "{{ .Values.AzureMonitorMetrics.AddonTokenAdapter.ImageRegistry }}{{ .Values.AzureMonitorMetrics.AddonTokenAdapter.ImageRepositoryWin }}:{{ .Values.AzureMonitorMetrics.AddonTokenAdapter.ImageTagWin }}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
           httpGet:
             path: /healthz
             port: 9999
           initialDelaySeconds: 10
           periodSeconds: 60
          resources:
           limits:
             memory: 500Mi
           requests:
             cpu: 100m
             memory: 100Mi
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_ADMIN
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - labelSelector:
                matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - windows
                  - key: type
                    operator: NotIn
                    values:
                      - virtual-kubelet
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: "Exists"
          effect: NoExecute
        - operator: "Exists"
          effect: NoSchedule
      volumes:
        - name: settings-vol-config
          configMap:
            name: ama-metrics-settings-configmap
            optional: true
        - name: prometheus-config-vol
          configMap:
            name: ama-metrics-prometheus-config-node-windows
            optional: true
        - name: host-log-containers
          hostPath:
            path: /var/log/containers
        - name: host-log-pods
          hostPath:
            path: /var/log/pods
        - name: ama-metrics-tls-secret-volume
          secret:
            secretName: ama-metrics-mtls-secret
            optional: true
      {{- $cloudEnv := lower .Values.global.commonGlobals.CloudEnvironment }}
      {{- if or (eq $cloudEnv "usnat") (eq $cloudEnv "ussec") (eq $cloudEnv "bleu") }}
        - name: ca-certs
          hostPath:
            path: C:\ca
      {{- end }}
{{- end }}

