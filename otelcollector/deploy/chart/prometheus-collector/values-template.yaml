# Default values for prometheus-collector.
# This is a YAML-formatted file .
# Declare variables to be passed into your templates.

# -- when true, ingestion will be based on Monitor account & DCR(s)
useMonitoringAccount: false

# -- when set to a string, this will be used as 'cluster' label's value in every time-series scraped & ingested (for both MAC & non-MAC based ingestion). When not specified , for non-MAC , clusterName parameter will be used as value of cluster label, and for MAC, the last part of the cluster's ARM resourceID will be used as value of cluster label.
clusterAlias: ""

# -- required & used only when useMonitoringAccount=true. This is the full ARM ResourceId for the Kubernetes cluster that is going to be monitoring with this chart
azureResourceId: ""

# -- required & used only when useMonitoringAccount=true. This is the Azure region for the Kubernetes cluster that is going to be monitoring with this chart
azureResourceRegion: ""

# -- required & used only when useMonitoringAccount=true. This is the cloud name for the Kubernetes cluster that is going to be monitoring with this chart
customEnvironment: "azurepubliccloud"

scrapeTargets:
  # -- when true, automatically scrape coredns service in the k8s cluster without any additional scrape config
  coreDns: true
  # -- when true, automatically scrape kubelet in every node in the k8s cluster without any additional scrape config
  kubelet: true
  # -- when true, automatically scrape cAdvisor in every node in the k8s cluster without any additional scrape config
  cAdvisor: true
  # -- when true, automatically scrape the kubernetes proxy in the k8s cluster without any additional scrape config
  kubeProxy: true
  # -- when true, automatically scrape the kubernetes api server in the k8s cluster without any additional scrape config
  apiServer: true
  # -- when true, automatically install kube-state-metrics chart and then scrape kube-state-metrics in the k8s cluster without any additional scrape config
  kubeState: true
  # -- when true, automatically install prometheus-node-exporter chart and then scrape node exporters (linux only) in the k8s cluster without any additional scrape config
  nodeExporter: true
   # -- when true, scrape windows exporter (windows only) in every windows node in the k8s cluster without any additional scrape config. Note:- windows exporter currently needs to be setup outside/seperately/manually with default port defaulting to 8192. Please see docs on this.
  windowsExporter: false
   # -- when true, scrape kube proxy endpoint (windows only) in every windows node in the k8s cluster without any additional scrape config
  windowsKubeProxy: false
  # -- when true, automatically scrape info about the Prometheus-Collector such as the amount and size of timeseries scraped
  prometheusCollectorHealth: true

# The following setting will set the scrape interval of each target
scrapeIntervalTargets:
  coreDns: "30s"
  kubelet: "30s"
  cAdvisor: "30s"
  kubeProxy: "30s"
  apiServer: "30s"
  kubeState: "30s"
  nodeExporter: "30s"
  windowsExporter: "30s"
  windowsKubeProxy: "30s"
  prometheusCollectorHealth: "30s"
    
# when minimalIngestionProfile is enabled, we will ingest only hand-picked/selected metrics per default target. see the list of metrics included per default target in our docs.
minimalIngestionProfile: true
  
# The following setting will allow only the metrics for each target whose names match the regex string. When this list is specified with minimalIngestionProfile=true, then this will be in addition to the metrics collected by the profile
keepListRegexes:
  coreDns: "" 
  kubelet: "" 
  cAdvisor: "" 
  kubeProxy: "" 
  apiServer: "" 
  kubeState: "" 
  nodeExporter: "" 
  windowsExporter: "" 
  windowsKubeProxy: "" 

azureMetricAccount:
  # -- default metric account name to ingest metrics into. This will be the account used if metric itself does not have account 'hinting' label. The certificate for this account should be specified in one of the further arguments below here
  defaultAccountName: ""  #required

#This setting holds information about azure key vault, where Pfx certificates are stored for your metroc account(s)
azureKeyVault:
  # -- name of the azure key vault resource
  name: "" #required
  # -- tenantid for the azure key vault resource
  tenantId: "" #required
  # -- cloudName for the azure key vault resource
  cloudName: "" # optional for public cloud.
  # -- clientid for a service principal that has access to read the Pfx certificates from keyvault specified above
  clientId: "" #required when using service principal to access keyvault
  # -- client secret for the above service principal
  clientSecret: "" #required when using service principal to access keyvault
  # -- name of the Pfx certificate(s) - one per metric account
  pfxCertNames: [] #required
  # -- enable/disable managed identity to access keyvault
  useManagedIdentity: false
  # -- name of the azure pod managed identity to access keyvault, requires useManagedIdentity true
  aad-pod-identity: ""
  # -- use the client id to specify which user assigned managed identity to use when acccesing keyvault. If using a user assigned identity as the VM's managed identity, then specify the identity's client id. If empty, AND 'useManagedIdentity' is true, then defaults to use the system assigned identity on the VM
  userAssignedIdentityID: ""

# -- name of the k8s cluster. This will be added as a 'cluster' label for every metric scraped
clusterName: "" #required

#do not use any of the internal settings. This is for testing purposes to be used by Geneva team only
internalSettings:
  intEnvironment: false
  clusterOverride: false

# Do not change the below settings. They are reserved for Arc Autonomous
arcAutonomousSettings:
  customRegionalEndpoint: ""
  customGlobalEndpoint: ""
  customResourceEndpoint: ""

# Only enable to view metrics being scraped for a short time. This can affect performance so it should not be enabled when not in use
debugMode:
  enabled: false

#if advanced==true (default is false), then it will deploy a daemonset in addition to replica, and move some of the default node targets (kubelet, cadvisor & nodeexporter) to daemonset
mode:
  advanced: false

#if windowsDaemonset==true (default is false) AND mode.advanced==true (default is false), then it will deploy a windows daemonset on windows nodes, and move some of the default node targets (windows-kube-procy and windowsexporter) to windows daemonset
windowsDaemonset: false

image:
  repository: ${MCR_REGISTRY}${MCR_REPOSITORY}
  tag: ${IMAGE_TAG}
  windows: 
    tag: ${IMAGE_TAG_WINDOWS}
  pullPolicy: IfNotPresent

# -- Applies additional labels to all pods.
podLabels: {}

# -- Applies additional labels to all pods.
podAnnotations: {}

resources:
 deployment:
   limits:
     cpu: 4
     memory: 7Gi
   requests:
     cpu: 1
     memory: 2Gi
 daemonSet:
   limits:
     cpu: 1
     memory: 2Gi
   requests:
     cpu: 500m
     memory: 1Gi
 daemonSetWindows:
   limits:
     cpu: 500m
     memory: 500Mi
kube-state-metrics:
  # Comma-separated list of additional Kubernetes label keys that will be used in the resource's
  # labels metric. By default the metric contains only name and namespace labels.
  # To include additional labels, provide a list of resource names in their plural form and Kubernetes
  # label keys you would like to allow for them (Example: '=namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...)'.
  # A single '*' can be provided per resource instead to allow any labels, but that has
  # severe performance implications (Example: '=pods=[*]').
  metricLabelsAllowlist: []
    # - namespaces=[k8s-label-1,k8s-label-n]

  # Comma-separated list of Kubernetes annotations keys that will be used in the resource'
  # labels metric. By default the metric contains only name and namespace labels.
  # To include additional annotations provide a list of resource names in their plural form and Kubernetes
  # annotation keys you would like to allow for them (Example: '=namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...)'.
  # A single '*' can be provided per resource instead to allow any annotations, but that has
  # severe performance implications (Example: '=pods=[*]').
  metricAnnotationsAllowList: []
    # - pods=[k8s-annotation-1,k8s-annotation-n]
  
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64
prometheus-node-exporter:
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64

prometheusConfig: ""

# To set a priority class for the deployment or daemonset, set the priority class name below
# this can be used to give the deployment a higher priority than other Pods to let it evict other Pods if there are not enough resources
deploymentPriorityClass: ""
daemonsetPriorityClass: ""
