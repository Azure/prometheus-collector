name: build-and-push-image-and-chart
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Set-workflow-initiator
        run: echo "Initiated by - ${GITHUB_ACTOR}"
      - name: Set-branch-name-for-non-pr
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV
      - name: Set-branch-name-for-pr
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / _)" >> $GITHUB_ENV
      - name: Set-Env
        run: echo "ENV=dev" >> $GITHUB_ENV
      - name: Set-ACR-Registry
        run: echo "ACR_REGISTRY=containerinsightsprod.azurecr.io" >> $GITHUB_ENV
      - name: Set-ACR-Repository
        run: echo "ACR_REPOSITORY=/public/azuremonitor/containerinsights/cidev" >> $GITHUB_ENV
      - name: Set-MCR-Registry
        run: echo "MCR_REGISTRY=mcr.microsoft.com" >> $GITHUB_ENV
      - name: Set-MCR-Repository
        run: echo "MCR_REPOSITORY=/azuremonitor/containerinsights/cidev" >> $GITHUB_ENV
      - name: Set-image-tag-name
        run: echo "IMAGE_TAG_NAME=prometheus-collector" >> $GITHUB_ENV
      - name: Set-image-tag-suffix
        run: echo "IMAGE_TAG_DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)" >> $GITHUB_ENV
      - name: Set-commit-sha
        run: echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      - name: Checkout-code
        uses: actions/checkout@v2
      - name: Set-Helm-chart-version
        run: version=$(cat ./otelcollector/VERSION) && echo "HELM_CHART_VERSION=${version}" >> $GITHUB_ENV
      - name: Set-image-tag
        run: echo "IMAGETAG=${ACR_REGISTRY}${ACR_REPOSITORY}:${IMAGE_TAG_NAME}-${BRANCH_NAME}-${HELM_CHART_VERSION}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Set-image-telemetry-tag
        run: echo "IMAGETAG_TELEMETRY=${IMAGE_TAG_NAME}-${BRANCH_NAME}-${HELM_CHART_VERSION}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Set-Helm-OCI-Experimental-feature
        run: echo "HELM_EXPERIMENTAL_OCI=1" >> $GITHUB_ENV
      - name: Set-Helm-tag
        run: echo "HELMTAG=${ACR_REGISTRY}${ACR_REPOSITORY}:${IMAGE_TAG_NAME}-chart-${BRANCH_NAME}-${HELM_CHART_VERSION}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Set-Helm-chart-versioning
        run: envsubst < ./otelcollector/deploy/chart/prometheus-collector/Chart-template.yaml > ./otelcollector/deploy/chart/prometheus-collector/Chart.yaml && envsubst < ./otelcollector/deploy/chart/prometheus-collector/values-template.yaml > ./otelcollector/deploy/chart/prometheus-collector/values.yaml
      - name: Show-versions-On-build-machine
        run: lsb_release -a && go version && helm version && docker version
      - name: Run-Helm-lint
        run: helm dependency update ./otelcollector/deploy/chart/prometheus-collector/ && helm lint ./otelcollector/deploy/chart/prometheus-collector/ --set "azureKeyVault.name=containerinsightstest1kv,azureKeyVault.pfxCertNames={containerinsightsgenevaaccount1-pfx,containerinsightsgenevaaccount2-pfx},azureKeyVault.tenantId=72f988bf-****-41af-****-2d7cd011db47,clusterName=mydevcluster,azureMetricAccount.defaultAccountName=containerinsightsgenevaaccount1,azureKeyVault.clientId=70937f05-****-4fc0-****-de917f2a9402,azureKeyVault.clientSecret=**********************************" --with-subcharts
      - name: Install-build-dependencies
        run: sudo apt-get install build-essential -y
      - name: Build-source-code
        run: cd ./otelcollector/opentelemetry-collector-builder/ && make
      - name: Dependency Detection setup
        uses: actions/checkout@v2
        with:
          repository: github/dependency-detection
          ref: releases/v1
          token: ${{ secrets.GH_PRIVATE_REPO_PAT }}
          path: .github/actions/dependency-detection
        # This is an experimental action that Microsoft OSE + GH Dependency Graph are piloting.
        #
        # If it ever encounters issues, feel free to disable this step to unblock builds.
      - name: Dependency Detection
        uses: ./.github/actions/dependency-detection
        with:
          token: ${{ github.token }}
      - name: Create-docker-image
        run: |
            cd ./otelcollector/ && docker build . --file Dockerfile -t $IMAGETAG --build-arg IMAGE_TAG=$IMAGETAG_TELEMETRY
      - name: List-docker-images
        run: docker images --digests --all
      - name: Run-trivy-scanner-on-docker-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGETAG }}"
          format: 'table'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'
          skip-dirs: 'opt/telegraf/telegraf,opt/microsoft/otelcollector/otelcollector'
          exit-code: '1'
          timeout: '5m0s'
      - name: Save-Helm-chart-to-local-cache
        run: cd ./otelcollector/deploy/chart/prometheus-collector/ && helm chart save . ${{ env.HELMTAG }}
      - name: List-local-Helm-Charts
        run: helm chart list
      - name: Login-to-ACR-thru-Docker
        if: github.event_name != 'pull_request'
        run: docker login containerinsightsprod.azurecr.io -u ${{ secrets.RCA_PS_DI }} -p ${{ secrets.RCA_PS_CES }}
      - name: Publish-docker-image-to-ACR
        if: github.event_name != 'pull_request'
        run: |
            docker push ${{ env.IMAGETAG }}
      - name: Login-to-ACR-thru-Helm
        if: github.event_name != 'pull_request'
        run: helm registry login containerinsightsprod.azurecr.io --username ${{ secrets.RCA_PS_DI }} --password ${{ secrets.RCA_PS_CES }}
      - name: Publish-Helm-chart-to-ACR
        if: github.event_name != 'pull_request'
        run: helm chart push ${{ env.HELMTAG }}
      - name: Login-to-Azure-Key-Vault
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEYVAULT_CREDENTIALS }}
      - name: Get-kube-config-from-Key-Vault
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "cdpxacrcredskv"
          secrets: 'ci-dev-aks-wcus-kubeconfig'
        id: GetKubeConfig
      - name: Get-kube-config
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        run: mkdir ~/.kube/ && echo "${{ steps.GetKubeConfig.outputs.ci-dev-aks-wcus-kubeconfig }}" > ~/.kube/config
      - name: Wait-for-mcr-image
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        run: |
          for i in 1 2 3 4 5 6 7 8 9 10
          do
            sleep 30
            if docker manifest inspect mcr.microsoft.com/azuremonitor/containerinsights/cidev:${IMAGETAG_TELEMETRY}
            then
              echo "Image published to mcr"
              exit 0
            fi
          done
          echo "Image not published to mcr within 5 minutes"
          exit 1
      - name: Deploy-to-cluster
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        run: cd ./otelcollector/deploy/chart/ && helm upgrade prom-dev ./prometheus-collector --reuse-values --set image.tag=${{ env.IMAGETAG_TELEMETRY }} --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true -n monitoring
      - name: Tag-this-push
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.HELM_CHART_VERSION }}-${{ env.IMAGE_TAG_DATE }}-${{ env.COMMIT_SHA }}
      #- name: Tag-this-push
      #  uses: actions-ecosystem/action-push-tag@v1
      #  if: github.event_name != 'pull_request'
      #  with:
      #    tag: ${{ env.IMAGETAG_TELEMETRY }}
      #    message: "Created tag ${{ env.IMAGETAG_TELEMETRY }} for CommitID: ${{ env.GITHUB_SHA }}"
