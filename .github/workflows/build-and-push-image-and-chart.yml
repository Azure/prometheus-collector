name: build-and-push-image-and-chart
on:
  workflow_dispatch
jobs:
  build-images-and-chart:
    name: Call Azure Pipeline
    runs-on: ubuntu-latest
    steps:
    - name: Azure Pipelines Action
      uses: Azure/pipelines@v1
      with:
        azure-devops-project-url: https://github-private.visualstudio.com/microsoft
        azure-pipeline-name: 'Azure.prometheus-collector'
        azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}
  deploy-chart:
    #if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Echo-test
        run: echo "testing"
      #- name: Login-to-Azure-Key-Vault
      #  uses: Azure/login@v1
      #  with:
      #    creds: ${{ secrets.AZURE_KEYVAULT_CREDENTIALS }}
      #- name: Get-kube-config-from-Key-Vault-sp
      #  uses: Azure/get-keyvault-secrets@v1
      #  with:
      #    keyvault: "cdpxacrcredskv"
      #    secrets: 'ci-dev-aks-wcus-kubeconfig'
      #  id: GetKubeConfig-sp
      #- name: Get-kube-config-from-Key-Vault-msi
      #  uses: Azure/get-keyvault-secrets@v1
      #  with:
      #    keyvault: "cdpxacrcredskv"
      #    secrets: 'ci-dev-aks-msi-eus2-kubeconfig'
      #  id: GetKubeConfig-msi
      #- name: Get-kube-config-from-Key-Vault-mac
      #  uses: Azure/get-keyvault-secrets@v1
      #  with:
      #    keyvault: "cdpxacrcredskv"
      #    secrets: 'ci-dev-aks-mac-eus-kubeconfig'
      #  id: GetKubeConfig-mac
      #- name: Get-kube-config-for-dev-cluster-sp
      #  run: rm -rf ~/.kube/ && mkdir ~/.kube/ && echo "${{ steps.GetKubeConfig-sp.outputs.ci-dev-aks-wcus-kubeconfig }}" > ~/.kube/config
      #- name: Wait-for-mcr-image
      #  run: |
      #    for i in 1 2 3 4 5 6 7 8 9 10
      #    do
      #      sleep 30
      #      if docker manifest inspect ${MCR_REGISTRY}${MCR_REPOSITORY}:${IMAGE_TAG} && docker manifest inspect ${MCR_REGISTRY}${MCR_REPOSITORY}:${IMAGE_TAG_WINDOWS} && docker manifest inspect ${MCR_REGISTRY}${MCR_REPOSITORY_HELM}:${IMAGE_TAG}
      #      then
      #        echo "Images and chart are published to mcr"
      #        exit 0
      #      fi
      #    done
      #    echo "Images and chart are not published to mcr within 5 minutes"
      #    exit 1
      #- name: Deploy-to-dev-cluster-sp
      #  run: helm pull oci://${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY_HELM }} --version ${{ env.HELM_SEMVER }} && helm upgrade --install prom-dev ./${{ env.HELM_CHART_NAME }}-${{ env.HELM_SEMVER }}.tgz --dependency-update --set image.repository=${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY }} --set image.tag=${{ env.IMAGE_TAG }} --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set azureKeyVault.name="ci-prometheus-kv" --set azureKeyVault.pfxCertNames="{containerinsightsdevclusteraccountcert}" --set azureKeyVault.tenantId="72f988bf-86f1-41af-91ab-2d7cd011db47" --set clusterName="ci-dev-aks-wcus" --set azureMetricAccount.defaultAccountName="containerinsightsdevclusteraccount" --set azureKeyVault.clientId=${{ secrets.CI_PROMETHEUS_KV_CLIENTID }} --set azureKeyVault.clientSecret=${{ secrets.CI_PROMETHEUS_KV_CLIENTSECRET }} --set mode.advanced=true --set windowsDaemonset=true --set internalSettings.intEnvironment=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi" -n monitoring --create-namespace
      #- name: Get-kube-config-for-dev-cluster-msi
      #  run: rm -rf ~/.kube/ && mkdir ~/.kube/ && echo "${{ steps.GetKubeConfig-msi.outputs.ci-dev-aks-msi-eus2-kubeconfig }}" > ~/.kube/config
      #- name: Deploy-to-dev-cluster-msi
      #  run: helm pull oci://${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY_HELM }} --version ${{ env.HELM_SEMVER }} && helm upgrade --install prom-dev-msi ./${{ env.HELM_CHART_NAME }}-${{ env.HELM_SEMVER }}.tgz --dependency-update --set image.repository=${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY }} --set image.tag=${{ env.IMAGE_TAG }} --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set azureKeyVault.name="ci-prometheus-kv" --set azureKeyVault.pfxCertNames="{containerinsightsdevclusteraccountcert}" --set azureKeyVault.tenantId="72f988bf-86f1-41af-91ab-2d7cd011db47" --set clusterName="ci-dev-aks-msi-eus2" --set azureMetricAccount.defaultAccountName="containerinsightsdevclusteraccount" --set azureKeyVault.useManagedIdentity=true --set mode.advanced=true --set windowsDaemonset=true --set internalSettings.intEnvironment=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi" --set minimalIngestionProfile="false" -n monitoring --create-namespace
      #- name: Get-kube-config-for-dev-cluster-mac
      #  run: rm -rf ~/.kube/ && mkdir ~/.kube/ && echo "${{ steps.GetKubeConfig-mac.outputs.ci-dev-aks-mac-eus-kubeconfig }}" > ~/.kube/config
      #- name: Deploy-to-dev-cluster-mac
      #  run: helm pull oci://${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY_HELM }} --version ${{ env.HELM_SEMVER }} && helm upgrade --install prom-dev-mac ./${{ env.HELM_CHART_NAME }}-${{ env.HELM_SEMVER }}.tgz --dependency-update --set image.repository=${{ env.MCR_REGISTRY }}${{ env.MCR_REPOSITORY }} --set image.tag=${{ env.IMAGE_TAG }} --set useMonitoringAccount=true --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set mode.advanced=true --set windowsDaemonset=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi" --set azureResourceId="/subscriptions/9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb/resourcegroups/ci-dev-aks-mac-eus-rg/providers/Microsoft.ContainerService/managedClusters/ci-dev-aks-mac-eus" --set azureResourceRegion="eastus" -n kube-system --create-namespace
      #- name: Tag-this-push
      #  id: tag_version
      #  uses: mathieudutour/github-tag-action@v6.0
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    custom_tag: ${{ env.HELM_SEMVER }}
