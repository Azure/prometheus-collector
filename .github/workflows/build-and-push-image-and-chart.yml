name: build-and-push-image-and-chart
on:
  push:
    branches:
      - main
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Set-branch-name
        run: echo "${GITHUB_REF#refs/heads/}"
      - name: Set-Env
        run: echo "ENV=dev" >> $GITHUB_ENV
      - name: Set-ACR-Registry
        run: echo "ACR_REGISTRY=containerinsightsprod.azurecr.io" >> $GITHUB_ENV
      - name: Set-ACR-Repository
        run: echo "ACR_REPOSITORY=/public/azuremonitor/containerinsights/cidev" >> $GITHUB_ENV
      - name: Set-image-tag-name
        run: echo "IMAGE_TAG_NAME=prometheus-collector" >> $GITHUB_ENV
      - name: Set-image-tag-suffix
        run: echo "IMAGE_TAG_DATE=$(date +%m-%d-%Y)" >> $GITHUB_ENV
      - name: Set-commit-sha
        run: echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      - name: Set-image-tag
        run: echo "IMAGETAG=${ACR_REGISTRY}${ACR_REPOSITORY}:${IMAGE_TAG_NAME}-${ENV}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Set-image-telemetry-tag
        run: echo "IMAGETAG_TELEMETRY=${IMAGE_TAG_NAME}-${ENV}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Set-Helm-OCI-Experimental-feature
        run: echo "HELM_EXPERIMENTAL_OCI=1" >> $GITHUB_ENV
      - name: Set-Helm-chart-version
        run: echo "HELM_CHART_VERSION=0.0.1" >> $GITHUB_ENV
      - name: Set-Helm-tag
        run: echo "HELMTAG=${ACR_REGISTRY}${ACR_REPOSITORY}:${IMAGE_TAG_NAME}-chart-${ENV}-${HELM_CHART_VERSION}-${IMAGE_TAG_DATE}-${COMMIT_SHA}" >> $GITHUB_ENV
      - name: Checkout-code
        uses: actions/checkout@v2
      - name: Show-versions-On-build-machine
        run: lsb_release -a && go version && helm version && docker version
      - name: Install-build-dependencies
        run: sudo apt-get install build-essential -y
      - name: Build-source-code
        run: cd ./otelcollector/opentelemetry-collector-builder/ && make
      - name: Create-docker-image
        run: |
            cd ./otelcollector/ && docker build . --file Dockerfile -t $IMAGETAG --build-arg IMAGE_TAG=$IMAGETAG_TELEMETRY
      - name: List-docker-images
        run: docker images --digests --all
      - name: Run-trivy-scanner-on-docker-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGETAG }}"
          format: 'table'
          #template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os'
          exit-code: '1'
      #- name: Publish-Trivy-scan-results
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: 'trivy-results.sarif'
      - name: Login-to-ACR-thru-Docker
        run: docker login containerinsightsprod.azurecr.io -u ${{ secrets.RCA_PS_DI }} -p ${{ secrets.RCA_PS_CES }}
      - name: Publish-docker-image-to-ACR
        run: |
            docker push ${{ env.IMAGETAG }}
      - name: Save-Helm-chart-to-local-cache
        run: cd ./otelcollector/deploy/chart/prometheus-collector/ && helm chart save . ${{ env.HELMTAG }}
      - name: List-local-Helm-Charts
        run: helm chart list
      - name: Login-to-ACR-thru-Helm
        run: helm registry login containerinsightsprod.azurecr.io --username ${{ secrets.RCA_PS_DI }} --password ${{ secrets.RCA_PS_CES }}
      - name: Publish-Helm-chart-to-ACR
        run: helm chart push ${{ env.HELMTAG }}

