parameters:
- name: azureSubscription
  type: string
- name: resourceGroup
  type: string
- name: clusterName
  type: string

steps:
- task: Go@0
  displayName: "go install ginkgo"
  inputs:
    command: 'install' # 'get' | 'build' | 'test' | 'custom'. Required. Command. Default: get.
    #customCommand: # string. Required when command == custom. Custom command. 
    arguments: github.com/onsi/ginkgo/v2/ginkgo@latest # string. Arguments. 
    # Advanced
    #workingDirectory: # string. Working directory.

- task: AzureCLI@2
  displayName: "Aks Get-Credentials"
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: az aks get-credentials --resource-group ${{ parameters.resourceGroup }} --name ${{ parameters.clusterName }}

- task: AzureCLI@2
  displayName: "Run ginkgo test suite"
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      az extension add --name alertsmanagement --allow-preview true                                                                    
      az alerts-management prometheus-rule-group list -g ${{ parameters.resourceGroup }}

      $o = az alerts-management prometheus-rule-group list -g ${{ parameters.resourceGroup }}                                                                
      $s = [string]::Join("", $o)                                                                                                      
      "prometheus-rule-group - $s"
      $j = convertfrom-json -InputObject $s  
      $rule = $j[0].rules[0].record
      $rule

      $clusterName = "${{ parameters.clusterName }}"
      $amw = "$clusterName-amw"
      $amw
      $o = az resource show --resource-type "microsoft.monitor/accounts" -g ${{ parameters.resourceGroup }}  -n $amw
      $s = [string]::Join("", $o)                                                                                                      
      "microsoft.monitor/accounts - $s"
      $j = convertfrom-json -InputObject $s
      $endPoint = $j.properties.metrics.prometheusQueryEndpoint
      $endPoint
      $resourceId = $j.id
      $resourceId
      [Environment]::SetEnvironmentVariable("AMW_QUERY_ENDPOINT", $endPoint)

      # Run Ginkgo
      $cmd = "$([Environment]::GetEnvironmentVariable('userprofile'))\go\bin\ginkgo.exe -- -parmRuleName ""$rule"" -parmAmwResourceId ""$resourceId"""
      "cmd - $cmd"
      "AMW_QUERY_ENDPOINT - $([Environment]::GetEnvironmentVariable("AMW_QUERY_ENDPOINT"))"
      Invoke-Expression -Command $cmd 
    workingDirectory: '.\otelcollector\test\ginkgo-e2e\regionTests'

