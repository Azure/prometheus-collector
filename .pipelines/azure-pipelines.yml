# Go to https://github-private.visualstudio.com/microsoft/_build?definitionId=405 and manually run the pipeline for CG detection
# Then find the results here: https://github-private.visualstudio.com/microsoft/_componentGovernance/188700
trigger: none

jobs:
- job: Common
  displayName: Common
  variables:
    ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
    ACR_REPOSITORY: '/public/azuremonitor/containerinsights/cidev/prometheus-collector/images'
  pool:
    name: Azure-Pipelines-CI-Prod-EO
  steps:
    - bash: |
        COMMIT_SHA=$(echo $(Build.SourceVersion) | cut -b -8)
        BRANCH_NAME=$(Build.SourceBranchName)
        DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
        VERSION=$(cat $(Build.SourcesDirectory)/otelcollector/VERSION)
        SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA
        LINUX_IMAGE_TAG=$SEMVER
        WINDOWS_IMAGE_TAG=$SEMVER-win
        LINUX_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_IMAGE_TAG
        WINDOWS_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WINDOWS_IMAGE_TAG
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=LINUX_FULL_IMAGE_NAME;isOutput=true]$LINUX_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_FULL_IMAGE_NAME"
      displayName: 'Set image registry, repo, and tags'
      name: setup
#- job: Linux
#  pool:
#    name: Azure-Pipelines-CI-Prod-EO
#  dependsOn: common
#  variables:
#    LINUX_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.LINUX_FULL_IMAGE_NAME'] ]
#  steps:
#    - bash: |
#        sudo apt-get install build-essential -y
#        make
#      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
#      displayName: 'make'
#    - bash: |
#        docker build . --file ./build/linux/Dockerfile -t $(LINUX_FULL_IMAGE_NAME)
#      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
#      displayName: 'Build docker images'
#    - bash: |
#        docker images --digests --all
#      displayName: 'List docker images'
    #- bash: |
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    #    trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(LINUX_FULL_IMAGE_NAME)
    #  displayName: 'Run trivy scan'
#    - bash: |
#        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
#        docker push $(LINUX_FULL_IMAGE_NAME)
#      displayName: 'Push docker image to acr'
#- job: Windows
#  pool:
#    vmImage: windows-2019
#  dependsOn: common
#  variables:
#    WINDOWS_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.WINDOWS_FULL_IMAGE_NAME'] ]
#  steps:
#    - powershell: |
#        ./makefile_windows.ps1
#      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
#      displayName: 'make'
#    - powershell: |
#        docker build . --file ./build/windows/Dockerfile -t $(WINDOWS_FULL_IMAGE_NAME)
#      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
#      displayName: 'Build docker images'
#    - powershell: |
#        docker images --digests --all
#      displayName: 'List docker images'
    #- bash: |
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    #    trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(WINDOWS_FULL_IMAGE_NAME)
    #  displayName: 'Run trivy scan'
#    - powershell: |
#        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
#        docker push $(WINDOWS_FULL_IMAGE_NAME)
#      displayName: 'Push docker image to acr'
- job: Chart
  pool: Azure-Pipelines-CI-Prod-EO
  dependsOn:
  - Common
  #- Linux
  #- Windows
  variables:
    MCR_REGISTRY: 'mcr.microsoft.com'
    MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/containerinsights/cidev'
    ACR_REPOSITORY_HELM: '/public/azuremonitor/containerinsights/cidev'
    HELM_CHART_NAME: 'prometheus-collector'
    HELM_SEMVER: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['setup.SEMVER'] ]
  steps:
  - bash: |
      export MCR_REGISTRY=$(MCR_REGISTRY)
      export MCR_REPOSITORY_HELM_DEPENDENCIES=$(MCR_REPOSITORY_HELM_DEPENDENCIES)
      export HELM_SEMVER=$(HELM_SEMVER)
      export IMAGE_TAG=$(IMAGE_TAG)
      echo $HELM_SEMVER
      echo $IMAGE_TAG
      envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml && envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values.yaml
      cat $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml
      helm version
    displayName: 'Substitute chart version in files'
  - bash: |
      helm package ./prometheus-collector/
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: 'Package helm chart'
  - bash: |
      helm registry login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
      helm push $(HELM_CHART_NAME)-$(HELM_SEMVER).tgz oci://$(ACR_REGISTRY)$(ACR_REPOSITORY_HELM)
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: 'Push helm chart'
