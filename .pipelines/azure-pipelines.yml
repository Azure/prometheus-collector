trigger:
  enabled: false
variables:
- name: LinuxContainerImage
  value: onebranch.azurecr.io/linux/ubuntu-2004:latest
- name: tag
  value: '$(Build.BuildId)'
resources:
  containers:
  - container: windows_build_container
    image: $(WindowsContainerImage)
    mountReadOnly:
      externals: true
    volumes:
    - c:\obtools_host:c:\obtools_container:ro
    env:
      Use_Isolation: true
  - container: windows_build_container2
    image: $(WindowsContainerImage2)
    mountReadOnly:
      externals: true
    volumes:
    - c:\obtools_host:c:\obtools_container:ro
    env:
      Use_Isolation: true
  - container: linux_build_container
    image: $(LinuxContainerImage)
    mapDockerSocket: false
    mountReadOnly:
      externals: true
    volumes:
    - $(Agent.WorkFolder)/telemetry:/__w/telemetry:rw
    - /mnt/obtools_host:/mnt/obtools_container:ro
  - container: linux_build_container2
    image: $(LinuxContainerImage2)
    mapDockerSocket: false
    mountReadOnly:
      externals: true
    volumes:
    - $(Agent.WorkFolder)/telemetry:/__w/telemetry:rw
    - /mnt/obtools_host:/mnt/obtools_container:ro
  - container: windows_onebranch_container
    image: "cdpxwin1809.azurecr.io/global/vse2019:latest"
    volumes:
    - c:\obtools_host:c:\obtools_container:rw
    - c:\ob_dotnet:c:\__t\dotnet:rw
    - c:\ob_gdn\gdnp:c:\__w\_gdn\gdnp:rw
    - c:\ob_gdn\packages:c:\__w\_gdn\packages:rw
    - c:\ob_gdn\tools:c:\__w\_gdn\tools:rw
    - c:\ob_gdn\versions:c:\__w\_gdn\versions:rw
    env:
      Use_Isolation: true
  - container: windows_onebranch_container_signing
    image: "mcr.microsoft.com/dotnet/framework/sdk@sha256:ebe68dac477264281193abf8f11924518cb0e0b222b66a6211d1d68b4138b3ef"
    volumes:
    - c:\obtools_host:c:\obtools_container:rw
    - c:\ob_dotnet:c:\__t\dotnet:rw
    - c:\ob_gdn\gdnp:c:\__w\_gdn\gdnp:rw
    - c:\ob_gdn\packages:c:\__w\_gdn\packages:rw
    - c:\ob_gdn\tools:c:\__w\_gdn\tools:rw
    - c:\ob_gdn\versions:c:\__w\_gdn\versions:rw
    env:
      Use_Isolation: true
  - container: linux_onebranch_container
    image: onebranch.azurecr.io/linux/ubuntu-1804:latest
    volumes:
    - $(Agent.WorkFolder)/telemetry:/__w/telemetry:rw
    - /mnt/obtools_host:/mnt/obtools_container:rw
  - container: linux_onebranch_signing_container
    image: onebranch.azurecr.io/linux/ubuntu-1804:latest
    volumes:
    - $(Agent.WorkFolder)/telemetry:/__w/telemetry:rw
    - /mnt/obtools_host:/mnt/obtools_container:rw
  repositories:
  - repository: templates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
stages:
- stage: sdl_sources
  dependsOn: []
  pool:
    name: OneBranchPipelines
    HostTenant: AME
    Host: windows
  jobs:
  - job: sdl_sources
    timeoutInMinutes: 1440
    variables:
    - name: CDP_MANAGED_HOST
      value: 'true'
    - name: CDP_CACHE_OBTOOLS_CONTAINER_PATH
      value: 'c:\obtools_container'
    - name: CDP_CACHE_OBTOOLS_HOST_PATH
      value: c:\obtools_host
    - name: Codeql.SkipTaskAutoInjection
      value: 'true'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: self
        submodules: true
        lfs: true
        fetchDepth: 50
        persistCredentials: False
        path: s
    - task: onebranch.pipeline.prebuildvalidation@1
      displayName: "\U0001F512 PreBuild Validation"
      inputs:
        cdpBuildType: Buddy
        skipOfficialValidation: true
        skipReddogValidation: true
        skipPoliciesValidation: ''
    - task: onebranch.pipeline.containertelemetry@1
      displayName: "\U0001F512 Container Telemetry"
      continueOnError: true
    - task: PowerShell@2
      displayName: "\U0001F512 Setup AntiMalware"
      continueOnError: true
      condition: true
      inputs:
        targetType: 'inline'
        script: >
          $destination = "$(Pipeline.Workspace)".Replace("/", "\")

          if (-not (Test-Path -Path $destination)) {
            New-Item -Path $destination -Force -ItemType Directory -ErrorAction SilentlyContinue
          }
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@4
      displayName: "\U0001F6E1 Guardian: AntiMalware Scanner"
      condition: true
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: $(Pipeline.Workspace)
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'OneDay'
        TreatStaleSignatureAs: 'Error'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
      displayName: "\U0001F6E1 Guardian: CredScan"
      target:
        container: windows_onebranch_container
      inputs:
        outputFormat: pre
        scanFolder: '$(Build.SourcesDirectory)'
        suppressionsFile: ''
        debugMode: false
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@2
      displayName: "\U0001F6E1 Guardian: PoliCheck"
      target:
        container: windows_onebranch_container
      inputs:
        targetType: F
        targetArgument: $(Build.SourcesDirectory)
    - task: PowerShell@2
      displayName: "\U0001F6E1 Guardian: Check if enable ESLint"
      target:
        container: windows_onebranch_container
      inputs:
        targetType: inline
        script: |
          # Don't include folders that start with dot because of a bug in ESLint: it skips folders that start with dot
          $tsFiles = Get-ChildItem -Path $(Build.SourcesDirectory) -Force -Filter *.ts -Recurse | Where-Object { -not ($_.FullName.Contains("\.")) }
          $jsFiles = Get-ChildItem -Path $(Build.SourcesDirectory) -Force -Filter *.js -Recurse | Where-Object { -not ($_.FullName.Contains("\.")) }
          Write-Host "TypeScript files count: $($tsFiles.Count)"
          Write-Host "JavaScript files count: $($jsFiles.Count)"
          if (($tsFiles.Count -gt 0) -or ($jsFiles.Count -gt 0)) {
           if ($tsFiles.Count -gt 0) {
              Write-Host "##vso[task.setvariable variable=SDL_INTERNAL_ESLINT_TS_ENABLED;issecret=false]true"
            }
            if ($jsFiles.Count -gt 0) {
              Write-Host "##vso[task.setvariable variable=SDL_INTERNAL_ESLINT_JS_ENABLED;issecret=false]true"
            }
          } else {
            Write-Host "##vso[task.setvariable variable=SDL_INTERNAL_ESLINT_JS_ENABLED;issecret=false]false"
            Write-Host "##vso[task.setvariable variable=SDL_INTERNAL_ESLINT_TS_ENABLED;issecret=false]false"
          }
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-eslint.ESLint@1
      displayName: "\U0001F6E1 Guardian: ESLint (JavaScript)"
      target:
        container: windows_onebranch_container
      condition: eq(variables['SDL_INTERNAL_ESLINT_JS_ENABLED'], 'true')
      continueOnError: true
      inputs:
        Configuration: 'recommended'
        TargetType: 'eslint'
        TargetsESLint: |
          $(Build.SourcesDirectory)/**/*.js
        ErrorLevel: 'warn'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-eslint.ESLint@1
      displayName: "\U0001F6E1 Guardian: ESLint (TypeScript)"
      target:
        container: windows_onebranch_container
      condition: eq(variables['SDL_INTERNAL_ESLINT_TS_ENABLED'], 'true')
      continueOnError: true
      inputs:
        Configuration: 'recommended'
        TargetType: 'eslint'
        TargetsESLint: |
          $(Build.SourcesDirectory)/**/*.ts
        ErrorLevel: 'warn'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-armory.Armory@2
      displayName: "\U0001F6E1 Guardian: ARMory"
      target:
        container: windows_onebranch_container
      continueOnError: true
      inputs:
        targetDirectory: '$(Build.SourcesDirectory)'
        targetFiles: f|**\*.json;-|.gdn\**;
        excludePassesFromLog: true
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@2
      displayName: "\U0001F6E1 Guardian: Security Analysis Report"
      target:
        container: windows_onebranch_container
      continueOnError: true
      condition: always()
      env:
        GDN_ALLOW_SHADOW_RC_FILES: true
      inputs:
        GdnExportPolicy: Microsoft
        GdnExportVstsConsole: false
        GdnExportSarifFile: true
        GdnExportTsvFile: false
        GdnExportHtmlFile: true
        GdnExportAllTools: true
        GdnExportOutputBaselineFile: $(Pipeline.Workspace)\.gdn\r\.gdnbaselines
        GdnExportOutputBaseline: 'default'
        GdnExportOutputSuppressionFile: $(Pipeline.Workspace)\.gdn\r\.gdnsuppress
        GdnExportOutputSuppressionSet: 'default'
        GdnExportBaselineFiles: ''
        GdnExportBaselines: default
        GdnExportSuppressionFiles: ''
        GdnExportSuppressionSets: default
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
      displayName: "\U0001F6E1 Guardian: Publish Artifacts"
      target:
        container: windows_onebranch_container
      continueOnError: true
      inputs:
        AllTools: true
        ArtifactName: drop_sdl_sources
        ArtifactType: Container
      condition: always()
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
      displayName: "\U0001F6E1 Guardian: Post Analysis"
      target:
        container: windows_onebranch_container
      env:
        GDN_ALLOW_SHADOW_RC_FILES: true
      inputs:
        GdnBreakAllTools: false
        GdnBreakPolicy: Microsoft
        GdnBreakPolicyMinSev: Error
        GdnBreakGdnToolCredScan: true
        GdnBreakGdnToolCredScanSeverity: Default
        GdnBreakGdnToolPoliCheckSeverity: Default
        GdnBreakGdnToolArmorySeverity: Default
        GdnBreakGdnToolESLintSeverity: Default
        GdnBreakGdnToolBanditSeverity: Default
        GdnBreakGdnToolCSRFSeverity: Default
        GdnBreakGdnToolSemmleSeverity: Default
        GdnBreakGdnToolPSScriptAnalyzerSeverity: Default
        GdnBreakGdnToolModernCop: True
        GdnBreakGdnToolPoliCheck: True
        GdnBreakGdnToolArmory: True
        GdnBreakGdnToolESLint: True
        GdnBreakGdnToolApiScan: false
        GdnBreakGdnToolBinSkim: false
        GdnBreakGdnToolCodesignValidation: false
        GdnBreakGdnToolFortifySca: false
        GdnBreakGdnToolFxCop: false
        GdnBreakGdnToolRoslynAnalyzers: false
        GdnBreakGdnToolSDLNativeRules: false
        GdnBreakGdnToolTSLint: false
        GdnBreakGdnToolBandit: False
        GdnBreakGdnToolCSRF: False
        GdnBreakGdnToolSemmle: False
        GdnBreakGdnToolPSScriptAnalyzer: False
        GdnBreakBaselineFiles: ''
        GdnBreakBaselines: default
        GdnBreakSuppressionFiles: ''
        GdnBreakSuppressionSets: default
- stage: build
  dependsOn: []
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: OneBranchPipelines
      HostTenant: AME
      Host: linux
    timeoutInMinutes: 1440
    dependsOn: []
    variables:
    - name: NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS
      value: 30
    - name: NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS
      value: 30
    - name: ob_outputDirectory
      value: $(Build.SourcesDirectory)/bin
    - name: CDP_MANAGED_HOST
      value: true
      readonly: true
    - name: CDP_BUILD_TYPE
      value: Buddy
      readonly: true
    - name: CDP_DOCKER_HOST_PATH
      value: /usr/bin/docker
      readonly: false
    - name: CDP_CACHE_OBTOOLS_CONTAINER_PATH
      value: /mnt/obtools_container
      readonly: true
    - name: CDP_CACHE_OBTOOLS_HOST_PATH
      value: /mnt/obtools_host
      readonly: true
    - name: CDP_SKIP_OFFICIAL_VALIDATION
      value: false
      readonly: true
    - name: ONEBRANCH_PIPELINES
      value: true
      readonly: false
    - name: AGENT_SKIP_POST_EXECUTION_IF_CONTAINER_STOPPED
      value: true
      readonly: false
    - name: Codeql.SkipTaskAutoInjection
      value: true
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: self
        submodules: true
        lfs: true
        fetchDepth: 50
        persistCredentials: False
        path: s
    - task: onebranch.pipeline.prebuildvalidation@1
      displayName: "\U0001F512 PreBuild Validation"
      inputs:
        cdpBuildType: Buddy
        skipOfficialValidation: true
        tagsList: ''
        skipPoliciesValidation: ''
    - task: onebranch.pipeline.containertelemetry@1
      displayName: "\U0001F512 Container Telemetry"
      continueOnError: true
    - task: AzureKeyVault@1
      displayName: "\U0001F512 Setup Pipeline Secrets"
      inputs:
        azureSubscription: 'onebranch-pipelines-kv'
        KeyVaultName: 'opprod-basic'
        SecretsFilter: 'CDP-DEFAULT-CLIENT-PAT'
    - task: NuGetAuthenticate@0
      target:
        container: linux_onebranch_container
      displayName: "\U0001F512 Setup Packages Auth"
    - task: CmdLine@2
      displayName: "\U0001F512 Setup Pipeline Variables"
      inputs:
        script: |
          echo "##vso[build.addbuildtag]onebranch_build_os_linux"
          echo "##vso[build.addbuildtag]onebranch_build_template_v2"
          echo "##vso[task.setvariable variable=CDP_DEFAULT_CLIENT_PACKAGE_PAT;issecret=false]$(CDP-DEFAULT-CLIENT-PAT)"
          echo "##vso[task.setvariable variable=VSS_NUGET_ACCESSTOKEN;issecret=false]$(CDP-DEFAULT-CLIENT-PAT)"
          echo "##vso[task.setvariable variable=VSS_NUGET_URI_PREFIXES;issecret=false]$VSS_NUGET_URI_PREFIXES;https://pkgs.dev.azure.com/;https://dev.azure.com/;https://msazure.pkgs.visualstudio.com/;https://ossmsft.pkgs.visualstudio.com/;https://microsoft.pkgs.visualstudio.com/;https://devdiv.pkgs.visualstudio.com/;https://msdata.pkgs.visualstudio.com/;https://onebranch.pkgs.visualstudio.com/;https://cloudbuild.pkgs.visualstudio.com/;https://securitytools.pkgs.visualstudio.com/;https://msasg.pkgs.visualstudio.com/;https://msblox.pkgs.visualstudio.com/;https://onebranch.pkgs.visualstudio.com/"
    - task: onebranch.pipeline.toolsinstaller@1
      target:
        container: linux_onebranch_container
      displayName: "\U0001F512 Install Pipeline Tools"
      inputs:
        dialtone: false
        clear_cache: $(ob_toolset_clear_cache)
    - task: CmdLine@2
      displayName: "\U0001F512 Setup Compatibility"
      inputs:
        script: |
          mkdir -p $AGENT_WORKFOLDER/_temp/opensslsigning/signing
          for container in `docker ps -q --filter "name=linux_build_container"`
          do
            echo "Add well known folders to container: $container"
            docker exec -t $container ln -s /__w/_temp/opensslsigning/signing /signing || (echo "Failed to add signing symlink" && exit 1)
            docker exec -t $container ln -s /__w/1/s /source || (echo "Failed to add source symlink" && exit 1)
          done
    - task: CmdLine@2
      inputs:
        script: >
          sudo apt-get install build-essential -y
      target:
        container: linux_build_container
        commands: restricted
      displayName: Get build dependencies (linux_build_container)
    - task: CmdLine@2
      inputs:
        script: >
          cd $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/ && make
      target:
        container: linux_build_container
        commands: restricted
      displayName: make (linux_build_container)
    - task: PowerShell@2
      displayName: "\U0001F512 Stop Containers"
      condition: always()
      inputs:
        targetType: 'inline'
        script: >
          try {
            Write-Host "Inspect Build Containers"
            & docker ps -q --filter "name=linux_build_container" | foreach { & docker logs --details $_ ; & docker inspect $_  }
            Write-Host "Inspect Sign Containers"
            & docker ps -q --filter "name=sign" | foreach { & docker logs --details $_ ; & docker inspect $_  }
            Write-Host "Inspect Utility Containers"
            & docker ps -q --filter "name=linux_onebranch_container" | foreach { & docker logs --details $_ ; & docker inspect $_  }
          } catch {
            Write-Host "Error happened during docker inspect"
          }

          & docker ps -q --filter "name=linux_build_container" | foreach { & docker stop $_ }

          & docker ps -q --filter "name=sign" | foreach { & docker stop $_ ; & docker rm $_ }

          & docker ps -q --filter "name=linux_onebranch_container" | foreach { & docker restart $_ }
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: "\U0001F6E1 Component Governance"
      target:
        container: linux_onebranch_container
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        sourceScanPath: '$(Build.SourcesDirectory)'
        ignoreDirectories: ''
        alertWarningLevel: ''
        failOnAlert: ''
    - task: CmdLine@2
      displayName: "\U0001F6E1 Guardian: AntiMalware Scanner"
      condition: true
      inputs:
        script: >
          service clamav-freshclam stop

          freshclam -v --stdout

          EX=$?

          if [ $EX -gt 1 ] ; then
            echo "##vso[task.logissue type=error;]ClamAV anti-malware database update failed per freshclam exit code '$EX'"
          fi

          service clamav-freshclam start


          mkdir -p $(Build.SourcesDirectory)/bin

          mkdir -p $(Pipeline.Workspace)/_sdt/logs


          clamscan --stdout -i --official-db-only=yes -l "$(Pipeline.Workspace)/_sdt/logs/clamscan.log" -r -z --cross-fs=yes --follow-dir-symlinks=2 --follow-file-symlinks=2 --detect-pua=no --phishing-sigs=yes --phishing-scan-urls=yes --heuristic-scan-precedence=yes --phishing-ssl=yes --phishing-cloak=yes --partition-intersection=yes --algorithmic-detection=yes --scan-pe=yes --scan-elf=yes --scan-ole2=yes --scan-pdf=yes --scan-swf=yes --scan-html=yes --scan-xmldocs=yes --scan-hwp3=yes --scan-archive=yes --detect-broken=no --block-encrypted=yes --block-macros=yes --max-filesize=100m --max-scansize=1024m --max-files=10000 --max-recursion=64 --max-dir-recursion=64 --max-embeddedpe=100m --max-htmlnormalize=100m --max-htmlnotags=100m --max-scriptnormalize=100m --max-ziptypercg=10m --max-partitions=64 --max-iconspe=256 --max-rechwp3=32 --pcre-max-filesize=100m --pcre-match-limit=16000 "$(Build.SourcesDirectory)/bin"

          EX=$?

          if [ $EX != 0 ] ; then
            echo "##vso[task.logissue type=warning;]Malware scan reported malware was found in '$(Build.SourcesDirectory)/bin' with exit code '$EX'."
            exit 0
          fi

          clamscan --stdout -i --official-db-only=yes -l "$(Pipeline.Workspace)/_sdt/logs/clamscan-sdt.log" -r -z --cross-fs=yes --follow-dir-symlinks=2 --follow-file-symlinks=2 --detect-pua=no --phishing-sigs=yes --phishing-scan-urls=yes --heuristic-scan-precedence=yes --phishing-ssl=yes --phishing-cloak=yes --partition-intersection=yes --algorithmic-detection=yes --scan-pe=yes --scan-elf=yes --scan-ole2=yes --scan-pdf=yes --scan-swf=yes --scan-html=yes --scan-xmldocs=yes --scan-hwp3=yes --scan-archive=yes --detect-broken=no --block-encrypted=yes --block-macros=yes --max-filesize=100m --max-scansize=1024m --max-files=10000 --max-recursion=64 --max-dir-recursion=64 --max-embeddedpe=100m --max-htmlnormalize=100m --max-htmlnotags=100m --max-scriptnormalize=100m --max-ziptypercg=10m --max-partitions=64 --max-iconspe=256 --max-rechwp3=32 --pcre-max-filesize=100m --pcre-match-limit=16000 "$(Pipeline.Workspace)/_sdt"

          EX=$?

          if [ $EX != 0 ] ; then
            echo "##vso[task.logissue type=warning;]Malware scan reported malware was found in '$(Pipeline.Workspace)/_sdt' with exit code '$EX'."
            exit 0
          fi
    - task: PowerShell@2
      displayName: "\U0001F512 Set Artifacts name suffix"
      condition: always()
      target:
        container: linux_onebranch_container
      continueOnError: true
      inputs:
        targetType: inline
        script: |
          if ($env:SYSTEM_JOBATTEMPT -gt 1) {
            Write-Host "##vso[task.setvariable variable=GuardianArtifactNameJobAttemptSuffix]_jobAttempt$($env:SYSTEM_JOBATTEMPT)"
          } else {
            Write-Host "##vso[task.setvariable variable=GuardianArtifactNameJobAttemptSuffix]"
          }
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F6E1 Guardian: Publish Artifacts"
      target:
        container: linux_onebranch_container
      continueOnError: true
      inputs:
        artifactName: drop_build_Build_sdl_analysis$(GuardianArtifactNameJobAttemptSuffix)
        targetPath: $(Pipeline.Workspace)/_sdt/logs
      condition: always()
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Build Artifacts"
      target:
        container: linux_onebranch_container
      condition: succeeded()
      inputs:
        artifactName: drop_build_Build
        targetPath: $(Build.SourcesDirectory)/bin
    - task: onebranch.pipeline.signing@1
      target:
        container: linux_onebranch_container
      condition: always()
      continueOnError: true
      displayName: "\U0001F512 Prepare Signing Logs"
      inputs:
        command: 'processlogs'
        copy_logs_destination: $(Agent.TempDirectory)/sign-logs
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Signing Logs"
      continueOnError: true
      target:
        container: linux_onebranch_container
      condition: eq(variables.OB_ARTIFACTS_SIGNING_LOGS_EXIST, 'true')
      inputs:
        artifactName: drop_build_Build_signingLogs$(System.JobAttempt)
        targetPath: $(Agent.TempDirectory)/sign-logs
    - task: PowerShell@2
      displayName: "\U0001F512 Generate artifactignore file"
      target:
        container: linux_onebranch_container
      condition: not(succeeded())
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: >
          $path = "$(Build.SourcesDirectory)/bin".Replace("/", "\")

          New-Item -Path $path -Force -ItemType Directory

          if (-not (Test-Path -Path "$path\.artifactignore")) {
            "**/*.exe`n**/*.dll`n**/*.sys`n**/*.nupkg`n**/*.zip`n**/*.pdb`n**/*.cat`n**/*.vhd`n**/*.vhdx`n**/*.cspkg" | Out-File -FilePath "$path\.artifactignore" -Encoding ascii
          }
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Logs On Failure"
      target:
        container: linux_onebranch_container
      condition: not(succeeded())
      inputs:
        artifactName: drop_build_Build_failed_$(System.JobAttempt)
        targetPath: $(Build.SourcesDirectory)/bin
  - job: Docker
    pool:
      name: OneBranchPipelines
      HostTenant: AME
      Host: linux
    timeoutInMinutes: 1440
    dependsOn:
    - Build
    variables:
    - name: NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS
      value: 30
    - name: NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS
      value: 30
    - name: ob_git_checkout
      value: true
    - name: CDP_MANAGED_HOST
      value: true
      readonly: true
    - name: CDP_SKIP_OFFICIAL_VALIDATION
      value: false
      readonly: true
    - name: CDP_BUILD_TYPE
      value: Buddy
      readonly: true
    - name: CDP_CACHE_OBTOOLS_CONTAINER_PATH
      value: c:\obtools_container
      readonly: true
    - name: CDP_CACHE_OBTOOLS_HOST_PATH
      value: c:\obtools_host
      readonly: true
    - name: ONEBRANCH_PIPELINES
      value: true
      readonly: false
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      target:
        commands: restricted
        container: linux_onebranch_container
      inputs:
        repository: self
        submodules: true
        lfs: true
        fetchDepth: 50
        persistCredentials: False
        path: s/dst
    - task: onebranch.pipeline.prebuildvalidation@1
      displayName: "\U0001F512 PreBuild Validation"
      inputs:
        cdpBuildType: Buddy
        skipOfficialValidation: true
        skipReddogValidation: true
        skipPoliciesValidation: ''
    - task: onebranch.pipeline.containertelemetry@1
      displayName: "\U0001F512 Container Telemetry"
      continueOnError: true
    - task: AzureKeyVault@1
      displayName: "\U0001F512 Setup Pipeline Secrets"
      inputs:
        azureSubscription: 'onebranch-pipelines-kv'
        KeyVaultName: 'opprod-basic'
        SecretsFilter: 'CDP-DEFAULT-CLIENT-PAT'
    - task: NuGetAuthenticate@0
      target:
        container: linux_onebranch_container
      displayName: "\U0001F512 Setup Packages Auth"
    - task: CmdLine@2
      displayName: "\U0001F512 Setup Pipeline Variables"
      inputs:
        script: |
          echo "##vso[build.addbuildtag]onebranch_build_docker_linux"
          echo "##vso[build.addbuildtag]onebranch_build_template_v2"
          echo "##vso[task.setvariable variable=CDP_DEFAULT_CLIENT_PACKAGE_PAT;issecret=false]$(CDP-DEFAULT-CLIENT-PAT)"
          echo "##vso[task.setvariable variable=VSS_NUGET_ACCESSTOKEN;issecret=false]$(CDP-DEFAULT-CLIENT-PAT)"
          echo "##vso[task.setvariable variable=VSS_NUGET_URI_PREFIXES;issecret=false]https://pkgs.dev.azure.com/;https://msazure.pkgs.visualstudio.com/;https://onebranch.pkgs.visualstudio.com/"
    - task: onebranch.pipeline.toolsinstaller@1
      displayName: "\U0001F512 Install Pipeline Tools"
      target:
        container: linux_onebranch_container
      inputs:
        dialtone: false
        clear_cache: $(ob_toolset_clear_cache)
    - task: PowerShell@2
      displayName: "\U0001F512 Prepare Server"
      inputs:
        targetType: 'inline'
        script: |
          New-Item -Path $(Build.SourcesDirectory)\out -Force -ItemType Directory
          & docker --version
    - task: onebranch.pipeline.containercontrol@1
      displayName: "\U0001F512 Docker: Set Container Image Name for Building "
      inputs:
        command: setImageName
        base_image_registry: ''
        base_image_name: ''
        base_image_tag: $(tag)
        enable_isolated_acr_push: ''
        enable_service_tree_acr_path: true
    - task: PowerShell@2
      displayName: "\U0001F512 Set Docker Build Arguments"
      target:
        container: host
      env:
        image: $(OB_DOCKER_JOB_CONTAINER_IMAGE)
        dockerfile: $(Build.SourcesDirectory)/dst/otelcollector/build/linux/Dockerfile
        context: $(Build.SourcesDirectory)/dst/otelcollector
        useDockerBuildKit: True
        defaultArguments: --force-rm --pull --no-cache
        customArguments: ''
        enableNetwork: False
        enableHyperV: False
        enableCache: False
        enablePull: True
        notAllowedArguments: --privileged --isolation --network
        restrictRegistries: False
      inputs:
        targetType: inline
        pwsh: True
        script: |
          # Read parameters
          $image = "$env:image"
          $repository = ""
          $tags = ""
          $dockerfile = "$env:dockerfile"
          $context = "$env:context"
          $useDockerBuildKit = [System.Convert]::ToBoolean("$env:useDockerBuildKit")
          $defaultArguments = "$env:defaultArguments"
          $customArguments = "$env:customArguments"
          $enableNetwork = [System.Convert]::ToBoolean("$env:enableNetwork")
          $enableHyperV = [System.Convert]::ToBoolean("$env:enableHyperV")
          $enableCache = [System.Convert]::ToBoolean("$env:enableCache")
          $enablePull = [System.Convert]::ToBoolean("$env:enablePull")
          $notAllowedArguments= "$env:notAllowedArguments"
          $restrictRegistries = [System.Convert]::ToBoolean("$env:restrictRegistries")

          # Split image parameter into it's components and write to environment variables for docker build
          $imageComponents = $image.Split(":")
          if( $imageComponents[0] ){
            $repository = $imageComponents[0]
          }
          else{
            Write-Error "Error image parameter does not include image repository"
          }
          if( $imageComponents[1] ){
            $tags = $imageComponents[1]
          }
          else{
            Write-Error "Error image parameter does not include image tags"
          }

          # If restrict registries is enabled, throw error for any image not from ACR or MCR
          $imageFromAcrOrMcr = $image -match "^mcr\.microsoft\.com\/" -or $image -match "^[a-zA-Z0-9]+\.azurecr\.io\/"
          if ($restrictRegistries -and -not $imageFromAcrOrMcr) {
            throw "Image $image must be pulled from mcr.microsoft.com or from *.azurecr.io registry"
          }

          Write-Host "imageRepository: $repository"
          Write-Host "imageTags: $tags"
          Write-Host "##vso[task.setvariable variable=CORE_IMAGE_REPOSITORY;]$repository"
          Write-Host "##vso[task.setvariable variable=CORE_IMAGE_TAGS;]$tags"

          # Configure Build Arguments
          Write-Host "defaultArguments: $defaultArguments"
          Write-Host "customArguments: $customArguments"
          Write-Host "notAllowedArguments: $notAllowedArguments"
          Write-Host "enableHyperV: $enableHyperV"
          Write-Host "enableNetwork: $enableNetwork"
          Write-Host "enableCache: $enableCache"
          Write-Host "enablePull: $enablePull"

          if (-not [string]::IsNullOrWhiteSpace($notAllowedArguments)) {
              $notAllowedArguments.Split(" ") | foreach {
                  $notAllowedArg = $_.Trim()
                  Write-Host "$notAllowedArg"
                  if ($customArguments.Contains($notAllowedArg) ) {
                      Write-Host "Input docker build arguments contain not allowed entry: '$notAllowedArg'. Please remove it."
                      Write-Host "##vso[task.logissue type=warning]Input docker build arguments contain not allowed entry: '$notAllowedArg'. Please removing it"
                      $customArguments = $customArguments.Replace($notAllowedArg, "")
                  }
              }
          }

          $buildArguments = $customArguments

          $buildArguments += " " + $defaultArguments.Trim();

          if ($enableHyperV) {
            $buildArguments += " --isolation hyperv"
          }

          if (-not $enableNetwork) {
              $buildArguments += " --network none"
          }

          if ($enableCache) {
              # Removing '--no-cache' argument
              $buildArguments = $buildArguments -ireplace [regex]::Escape('--no-cache'), ''
              # Removing double spaces
              $buildArguments = $buildArguments.Replace('  ', ' ').Trim()
          }

          if (-not $enablePull) {
              $buildArguments = $buildArguments -ireplace [regex]::Escape('--pull'), ''
              $buildArguments = $buildArguments.Replace('  ', ' ').Trim()
          }

          if ($useDockerBuildKit) {
            $dockerBuildKitSwitch = 1
          }
          else{
            $dockerBuildKitSwitch = 0
          }
          Write-Host "Docker Build Kit Parameter: $dockerBuildKitSwitch"
          Write-Host "##vso[task.setvariable variable=DOCKER_BUILDKIT_SWITCH;]$dockerBuildKitSwitch"

          Write-Host "Calculated Arguments: $buildArguments"
          Write-Host "##vso[task.setvariable variable=CORE_DOCKER_BUILD_ARGUMENTS;]$buildArguments"
    - task: Docker@2
      displayName: "\U0001F512 Docker: Build"
      env:
        DOCKER_BUILDKIT: $(DOCKER_BUILDKIT_SWITCH)
      inputs:
        repository: $(CORE_IMAGE_REPOSITORY)
        command: build
        Dockerfile: $(Build.SourcesDirectory)/dst/otelcollector/build/linux/Dockerfile
        buildContext: $(Build.SourcesDirectory)/dst/otelcollector
        tags: $(CORE_IMAGE_TAGS)
        arguments: $(CORE_DOCKER_BUILD_ARGUMENTS)
        addPipelineData: True
    - task: onebranch.pipeline.containercontrol@1
      displayName: "\U0001F512 Docker: Save Image "
      inputs:
        command: saveImage
        base_image_name: $(OB_DOCKER_JOB_BASE_IMAGE_URI)
        base_image_tag: $(OB_DOCKER_JOB_BASE_IMAGE_TAG)
        save_path: $(Build.SourcesDirectory)/out/prometheus-collector-image.tar
        compress: ''
    - task: onebranch.pipeline.containercontrol@1
      displayName: "\U0001F512 Docker: Save ImageMetadata "
      inputs:
        command: saveImageMetadata
        base_image_name: $(OB_DOCKER_JOB_BASE_IMAGE_URI)
        base_image_tag: $(OB_DOCKER_JOB_BASE_IMAGE_TAG)
        base_image_registry: $(OB_DOCKER_JOB_ACR_URI)
        base_image_repository_name: ''
        save_path: $(Build.SourcesDirectory)/out/prometheus-collector-image.tar
        image_acr_digest: $(OB_DOCKER_JOB_CONTAINER_ACR_IMAGE_DIGEST)
        image_acr_size: $(OB_DOCKER_JOB_CONTAINER_ACR_IMAGE_SIZE)
    - task: ComponentGovernanceComponentDetection@0
      displayName: "\U0001F6E1 Component Governance: Scan output folder"
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        sourceScanPath: '$(Build.SourcesDirectory)'
        ignoreDirectories: ''
        alertWarningLevel: ''
        failOnAlert: ''
    - task: PowerShell@2
      displayName: "\U0001F512 AntiMalware Disabled"
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.logissue type=warning]This buddy/pullrequest build has bypassed critical security and compliance checks required for builds used in production. Please be responsible and ensure you are following proper security and compliance guidance when using this build"
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Build Artifacts"
      target:
        container: host
      condition: succeeded()
      inputs:
        artifactName: drop_build_Docker
        targetPath: $(Build.SourcesDirectory)/out
    - task: onebranch.pipeline.signing@1
      target:
        container: host
      condition: always()
      continueOnError: true
      displayName: "\U0001F512 Prepare Signing Logs"
      inputs:
        command: 'processlogs'
        copy_logs_destination: $(Agent.TempDirectory)/sign-logs
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Signing Logs"
      continueOnError: true
      target:
        container: host
      condition: eq(variables.OB_ARTIFACTS_SIGNING_LOGS_EXIST, 'true')
      inputs:
        artifactName: drop_build_Docker_signingLogs$(System.JobAttempt)
        targetPath: $(Agent.TempDirectory)/sign-logs
    - task: PowerShell@2
      displayName: "\U0001F512 Generate artifactignore file"
      target:
        container: host
      condition: not(succeeded())
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: >
          $path = "$(Build.SourcesDirectory)/out".Replace("/", "\")

          New-Item -Path $path -Force -ItemType Directory

          if (-not (Test-Path -Path "$path\.artifactignore")) {
            "**/*.exe`n**/*.dll`n**/*.sys`n**/*.nupkg`n**/*.zip`n**/*.pdb`n**/*.cat`n**/*.vhd`n**/*.vhdx`n**/*.cspkg" | Out-File -FilePath "$path\.artifactignore" -Encoding ascii
          }
    - task: PublishPipelineArtifact@0
      displayName: "\U0001F512 Publish Logs On Failure"
      target:
        container: host
      condition: not(succeeded())
      inputs:
        artifactName: drop_build_Docker_failed_$(System.JobAttempt)
        targetPath: $(Build.SourcesDirectory)/out
    - task: onebranch.pipeline.containercontrol@1
      displayName: "\U0001F512 Docker: Set Container Image Name For Removing "
      condition: always()
      inputs:
        command: setImageName
        base_image_registry: ''
        base_image_name: ''
        base_image_tag: $(tag)
        enable_isolated_acr_push: ''
        enable_service_tree_acr_path: true
    - task: onebranch.pipeline.containercontrol@1
      displayName: "\U0001F512 Docker: Remove Image "
      condition: always()
      inputs:
        command: removeImage
        base_image_registry: $(OB_DOCKER_JOB_ACR_URI)
        base_image_name: $(OB_DOCKER_JOB_BASE_IMAGE_URI)
        base_image_tag: $(OB_DOCKER_JOB_BASE_IMAGE_TAG)
        image_uri: $(OB_DOCKER_JOB_CONTAINER_IMAGE)