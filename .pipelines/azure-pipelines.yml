# Go to https://github-private.visualstudio.com/microsoft/_build?definitionId=405 and manually run the pipeline for CG detection
# Then find the results here: https://github-private.visualstudio.com/microsoft/_componentGovernance/188700
trigger: none

jobs:
- job: Common
  displayName: Common
  variables:
    ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
    ACR_REPOSITORY: '/public/azuremonitor/containerinsights/cidev/prometheus-collector/images'
    ACR_REPOSITORY_HELM: '/public/azuremonitor/containerinsights/cidev'
    HELM_CHART_NAME: 'prometheus-collector'
  pool:
    name: Azure-Pipelines-CI-Prod-EO
  steps:
    - bash: |
        BRANCH_NAME=$(Build.SourceBranchName)
        DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
        VERSION=$(cat $(Build.SourcesDirectory)/otelcollector/VERSION)
        SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA
        echo $SEMVER
        LINUX_IMAGE_TAG=$SEMVER
        WINDOWS_IMAGE_TAG=$SEMVER-win
        echo $WINDOWS_IMAGE_TAG
        LINUX_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_IMAGE_TAG
        WINDOWS_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WINDOWS_IMAGE_TAG
        HELM_CHART_NAME_AND_VERSION=$HELM_CHART_NAME-$SEMVER
        HELM_CHART_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=LINUX_FULL_IMAGE_NAME;isOutput=true]$LINUX_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=HELM_CHART_FULL_IMAGE_NAME;isOutput=true]$HELM_CHART_FULL_IMAGE_NAME"
      displayName: 'Set image registry, repo, and tags'
- job: Linux
  pool:
    name: Azure-Pipelines-CI-Prod-EO
  dependsOn: common
  variables:
    LINUX_FULL_IMAGE_NAME: $[ dependencies.common.outputs['Common.LINUX_FULL_IMAGE_NAME'] ]
  steps:
    - bash: |
        sudo apt-get install build-essential -y
        make
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: 'make'
    - bash: |
        docker build . --file ./build/linux/Dockerfile -t $(LINUX_FULL_IMAGE_NAME)
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: 'Build docker images'
    - bash: |
        docker images --digests --all
      displayName: 'List docker images'
    - bash: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(LINUX_FULL_IMAGE_NAME)
      displayName: 'Run trivy scan'
    #- bash: |
    #    docker login containerinsightsprod.azurecr.io -u ${{ secrets.RCA_PS_DI }} -p ${{ secrets.RCA_PS_CES }}
    #    docker push $(LINUX_FULL_IMAGE_NAME)
    #  displayName: 'Push docker image to acr'
- job: Windows
  pool:
    vmImage: windows-2019
  dependsOn: common
  variables:
    WINDOWS_FULL_IMAGE_NAME: $[ dependencies.common.outputs['Common.WINDOWS_FULL_IMAGE_NAME'] ]
  steps:
    - powershell: |
        ./makefile_windows.ps1
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: 'make'
    - powershell: |
        docker build . --file ./build/windows/Dockerfile -t $(WINDOWS_FULL_IMAGE_NAME)
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: 'Build docker images'
    - powershell: |
        docker images --digests --all
      displayName: 'List docker images'
    #- bash: |
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    #    trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(WINDOWS_FULL_IMAGE_NAME)
    #  displayName: 'Run trivy scan'
    #- bash: |
    #    docker login containerinsightsprod.azurecr.io -u ${{ secrets.RCA_PS_DI }} -p ${{ secrets.RCA_PS_CES }}
    #    docker push $(WINDOWS_FULL_IMAGE_NAME)
    #  displayName: 'Push docker image to acr'
- job: Chart
  pool: Azure-Pipelines-CI-Prod-EO
  dependsOn:
  - Linux
  - Windows
  variables:
    MCR_REGISTRY: 'mcr.microsoft.com'
    MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/containerinsights/cidev'
    HELM_CHART_FULL_IMAGE_NAME: $[ dependencies.common.outputs['Common.HELM_CHART_FULL_IMAGE_NAME'] ]
    HELM_SEMVER: $[ dependencies.common.outputs['Common.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['Common.SEMVER'] ]
  steps:
  - bash: |
      envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml && envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values.yaml
      helm version
    displayName: 'Substitute chart version in files'
  - bash: |
      helm package ./prometheus-collector/
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: 'Package helm chart'
  #- bash: |
  #    helm registry login containerinsightsprod.azurecr.io --username ${{ secrets.RCA_PS_DI }} --password ${{ secrets.RCA_PS_CES }}
  #    helm push ${{ env.HELM_CHART_NAME }}-${{ env.HELM_SEMVER }}.tgz oci://${{ env.ACR_REGISTRY }}${{ env.ACR_REPOSITORY_HELM }}
  #  workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
  #  displayName: 'Push helm chart'

    
