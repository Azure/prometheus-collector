# Go to https://github-private.visualstudio.com/microsoft/_build?definitionId=405 and manually run the pipeline for CG detection
# Then find the results here: https://github-private.visualstudio.com/microsoft/_componentGovernance/188700
trigger: none

jobs:
- job: Common
  displayName: Common
  variables:
    ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
    ACR_REPOSITORY: '/public/azuremonitor/containerinsights/cidev/prometheus-collector/images'
    HELM_CHART_NAME: 'prometheus-collector'
  pool:
    name: Azure-Pipelines-CI-Prod-EO
  steps:
    - bash: |
        COMMIT_SHA=$(echo $(Build.SourceVersion) | cut -b -8)
        BRANCH_NAME=$(Build.SourceBranchName)
        DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
        VERSION=$(cat $(Build.SourcesDirectory)/otelcollector/VERSION)
        SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA
        LINUX_IMAGE_TAG=$SEMVER
        WINDOWS_IMAGE_TAG=$SEMVER-win
        LINUX_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_IMAGE_TAG
        WINDOWS_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WINDOWS_IMAGE_TAG
        HELM_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM/HELM_CHART_NAME:SEMVER
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=LINUX_FULL_IMAGE_NAME;isOutput=true]$LINUX_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS__IMAGE_TAG;isOutput=true]$WINDOWS_IMAGE_TAG"
        echo "##vso[task.setvariable variable=HELM_CHART_NAME;isOutput=true]$HELM_CHART_NAME"
        echo "##vso[task.setvariable variable=HELM_FULL_IMAGE_NAME;isOutput=true]$HELM_FULL_IMAGE_NAME"
      displayName: 'Set image registry, repo, and tags'
      name: setup
- job: Linux
  pool:
    name: Azure-Pipelines-CI-Prod-EO
  dependsOn: common
  variables:
    LINUX_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.LINUX_FULL_IMAGE_NAME'] ]
  steps:
    - bash: |
        sudo apt-get install build-essential -y
        make
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: 'make'
    - bash: |
        mkdir -p $(Build.ArtifactStagingDirectory)/linux
        docker buildx create --name testbuilder
        docker buildx use testbuilder
        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
        docker buildx build . --file ./build/linux/Dockerfile -t $(LINUX_FULL_IMAGE_NAME) --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --push
        docker pull $(LINUX_FULL_IMAGE_NAME)
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: 'Build docker images'
    - bash: |
        docker images --digests --all
      displayName: 'List docker images'
    #- bash: |
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    #    trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(LINUX_FULL_IMAGE_NAME)
    #  displayName: 'Run trivy scan'
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generation Task'
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
        DockerImagesToScan: '$(LINUX_FULL_IMAGE_NAME)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop
- job: Windows
  pool:
    vmImage: windows-2019
  dependsOn: common
  variables:
    WINDOWS_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.WINDOWS_FULL_IMAGE_NAME'] ]
  steps:
    - powershell: |
        ./makefile_windows.ps1
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: 'make'
    - powershell: |
        docker build . --file ./build/windows/Dockerfile -t $(WINDOWS_FULL_IMAGE_NAME)
        New-Item -Path "$(Build.ArtifactStagingDirectory)" -Name "windows" -ItemType "directory"
        @{"image.name"="$(WINDOWS_FULL_IMAGE_NAME)"} | ConvertTo-Json -Compress | Out-File -Encoding ascii $(Build.ArtifactStagingDirectory)/windows/metadata.json
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: 'Build docker images'
    - powershell: |
        docker images --digests --all
      displayName: 'List docker images'
    - powershell: |
        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
        docker push $(WINDOWS_FULL_IMAGE_NAME)
      displayName: 'Push docker image to acr'
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generation Task'
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)/windows'
        DockerImagesToScan: '$(WINDOWS_FULL_IMAGE_NAME)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop
- job: Chart
  pool: Azure-Pipelines-CI-Prod-EO
  dependsOn:
  - Common
  - Linux
  - Windows
  variables:
    MCR_REGISTRY: 'mcr.microsoft.com'
    MCR_REPOSITORY: '/azuremonitor/containerinsights/cidev/prometheus-collector/images'
    MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/containerinsights/cidev'
    ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
    ACR_REPOSITORY_HELM: '/public/azuremonitor/containerinsights/cidev'
    HELM_CHART_NAME: $[ dependencies.common.outputs['setup.HELM_CHART_NAME'] ]
    HELM_SEMVER: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG_WINDOWS: $[ dependencies.common.outputs['setup.WINDOWS_IMAGE_TAG'] ]
    HELM_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.HELM_FULL_IMAGE_NAME'] ]
  steps:
  - bash: |
      envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml && envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values.yaml
      cat $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml
      helm version
    displayName: 'Substitute chart version in files'
  - bash: |
      helm dep update
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/
    displayName: 'Update helm dependencies'
  - bash: |
      helm package ./prometheus-collector/
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: 'Package helm chart'
  - bash: |
      helm registry login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
      helm push $(HELM_CHART_NAME)-$(HELM_SEMVER).tgz oci://$(ACR_REGISTRY)$(ACR_REPOSITORY_HELM)
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: 'Push helm chart'
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/chart'
      DockerImagesToScan: $(ACR_REGISTRY)$(ACR_REPOSITORY_HELM)/$(HELM_CHART_NAME):$(HELM_SEMVER)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
- job: Deploy
  pool: Azure-Pipelines-CI-Prod-EO
  dependsOn:
  - Chart
  #steps:
  #- task: AzureKeyVault@1
  #  inputs:
  #    azureSubscription: 'repo-kv-demo'                    ## YOUR_SERVICE_CONNECTION_NAME
  #    KeyVaultName: 'kv-demo-repo'                         ## YOUR_KEY_VAULT_NAME
  #    SecretsFilter: 'secretDemo'                          ## YOUR_SECRET_NAME. Default value: *
  #    RunAsPreJob: false                                   ## Make the secret(s) available to the whole job
