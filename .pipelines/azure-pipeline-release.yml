trigger: none

parameters:
- name: "pushNewNEChart"
  displayName: "Push New NE Chart"
  type: boolean
  default: false
- name: 'NEChartTag'
  displayName: 'NE Chart Tag'
  type: string
  default: '4.39.0'
- name: 'onlyCCPRelease'
  type: boolean
  default: false

variables:
- name: ServiceTreeGUID
  value: 3170cdd2-19f0-4027-912b-1027311691a2

resources:
  containers: []
  pipelines:
  - pipeline: '_Azureprometheus-collector'
    project: 'azure'
    source: 'Azure.prometheus-collector'
    #branch: 'main'
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    settings:
      oneESTagStagePool:
        name: Azure-Pipelines-CI-Test-EO
        image: ci-1es-managed-ubuntu-2204
    pool:
      name: Azure-Pipelines-CI-Test-EO
      image: ci-1es-managed-ubuntu-2204
      os: linux
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-CI-Test-EO
        image: ci-1es-managed-windows-2022
        os: windows
    serviceTreeId: $(ServiceTreeGUID)
    stages:
    - stage: Push_Images
      displayName: Push Images
      pool:
        name: Azure-Pipelines-CI-Test-EO
        image: ci-1es-managed-windows-2022
        os: windows
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: ev2_image_rollout
        displayName: Push to Prod ACR Ev2 Rollout
        pool:
          name: Azure-Pipelines-CI-Test-EO
          image: ci-1es-managed-windows-2022
          os: windows
        templateContext:
          type: releaseJob
          isProduction: true
          workflow: ev2-ra
          inputs:
          - input: pipelineArtifact
            pipeline:  _Azureprometheus-collector
            artifactName: ev2-drop
          ev2:
            rolloutInfra: Prod
            serviceRootPath: deploy/ServiceGroupRoot
            rolloutSpecPath: RolloutSpec.json
            select: regions(eastus2euap)
            skipRegistrationIfExists: true
            forceRegistration: true
            configurationOverrides:
              settings:
                linuxTag: "$(resources.pipeline._Azureprometheus-collector.runName)"
                linuxCCPTag: "$(resources.pipeline._Azureprometheus-collector.runName)-ccp"
                windowsTag: "$(resources.pipeline._Azureprometheus-collector.runName)-win"
                chartTag: "$(resources.pipeline._Azureprometheus-collector.runName)"
                targetAllocatorTag: "$(resources.pipeline._Azureprometheus-collector.runName)-targetallocator"
                configReaderTag: "$(resources.pipeline._Azureprometheus-collector.runName)-cfg"
                pushNewNEChart: "${{ lower(parameters.pushNewNEChart) }}"
                NEChartTag: "${{ parameters.NEChartTag }}"
                onlyCCPRelease: "${{ lower(parameters.onlyCCPRelease) }}"
    - stage: Deploy_to_Prod_Clusters
      displayName: Deploy to Prod Clusters
      dependsOn: Push_Images
      pool:
        name: Azure-Pipelines-CI-Test-EO
        image: ci-1es-managed-windows-2022
        os: windows
      jobs:
      - job: Job_1
        displayName: Deploy to Prod Clusters
        condition: succeeded()
        timeoutInMinutes: '0'
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: ‚è¨ Pipeline Artifact Download
          inputs:
            buildType: specific
            project: $(resources.pipeline._Azureprometheus-collector.projectID)
            definition: $(resources.pipeline._Azureprometheus-collector.pipelineID)
            allowFailedBuilds: false
            buildVersionToDownload: specific
            pipelineId: $(resources.pipeline._Azureprometheus-collector.runID)
            pipeline: _Azureprometheus-collector
            targetPath: $(Pipeline.Workspace)/ev2Artifact
        - task: Bash@3
          displayName: Sleep for 5 minutes
          inputs:
            targetType: inline
            script: |
              echo "Starting sleep for 5 minutes..."
              for i in {1..5}
              do
                echo "Minute $i of 5 elapsed..."
                sleep 60
              done
              echo "Sleep completed."
        - task: HelmInstaller@1
          target:
            container: host
          displayName: Install Helm
        - task: Bash@3
          inputs:
            targetType: inline
            script: |
              echo "CHART_TAG: $CHART_TAG"
              echo "LINUX_TAG: $LINUX_TAG"
              echo "WINDOWS_TAG: $WINDOWS_TAG"
              echo "LOOP_COUNTER: $LOOP_COUNTER"
              echo "MAX_RETRIES: $MAX_RETRIES"
              echo "SLEEP_INTERVAL: $SLEEP_INTERVAL"
              
              # Wait for images and chart to be published to MCR
              for i in $(seq 1 $MAX_RETRIES)
              do            
                  sleep $SLEEP_INTERVAL
                  echo "Loop iteration: $i"
                  echo "Checking: $MCR_REGISTRY$PROD_MCR_AGENT_REPO:$LINUX_TAG"
                  echo "Checking: $MCR_REGISTRY$PROD_MCR_AGENT_REPO:$WINDOWS_TAG"
                  echo "Checking: $MCR_REGISTRY$PROD_MCR_CHART_REPO:$CHART_TAG"
                  
                  # Get repository responses
                  output1=$(curl -s https://$MCR_REGISTRY/v2$PROD_MCR_AGENT_REPO/tags/list)
                  output2=$(curl -s https://$MCR_REGISTRY/v2$PROD_MCR_ARC_CHART_REPO/tags/list)

                  # Check if all required tags are present
                  if (echo $output1 | grep $LINUX_TAG) && (echo $output1 | grep $WINDOWS_TAG) && (echo $output2 | grep $CHART_TAG)
                  then
                      echo "Images and chart are published to mcr"
                      echo "##vso[task.setvariable variable=MCRPublishStatus;]success"
                      exit 0
                  fi
              done          
              echo "Images and chart are not published to mcr within $((MAX_RETRIES * SLEEP_INTERVAL / 60)) minutes"
              exit 1
          env:
            LINUX_TAG: "$(resources.pipeline._Azureprometheus-collector.runName)"
            WINDOWS_TAG: "$(resources.pipeline._Azureprometheus-collector.runName)-win"
            CHART_TAG: "$(resources.pipeline._Azureprometheus-collector.runName)"
            MAX_RETRIES: 10
            SLEEP_INTERVAL: 30
            MCR_REGISTRY: "mcr.microsoft.com"
            PROD_MCR_AGENT_REPO: "/azuremonitor/containerinsights/ciprod/prometheus-collector/images"
            PROD_MCR_CHART_REPO: "/azuremonitor/containerinsights/ciprod/ama-metrics-arc"
            PROD_MCR_ARC_CHART_REPO: "/azuremonitor/containerinsights/ciprod/ama-metrics-arc"
          target:
            container: host
          displayName: Check images and ARC chart are pushed to MCR
        - task: AzureCLI@2
          displayName: 'Fetch Service Connection Subscription Id (1ES PT)'
          continueOnError: true
          inputs:
            azureSubscription: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              try {
                $accountInfo = az account show --query "{subscriptionId:id, tenantId:tenantId}" --only-show-errors --output json | ConvertFrom-Json
                Write-Host "Subscription ID: $($accountInfo.subscriptionId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID;]$($accountInfo.subscriptionId)"
                Write-Host "Tenant ID: $($accountInfo.tenantId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_TENANTID;]$($accountInfo.tenantId)"
              } catch {
                Write-Host "Failed to fetch subscription id."
                Write-Host $_.Exception.Message
                exit 0
              }
        - task: 1ESGPTRunTask@3.0.314
          displayName: Service Connection Environment Verification (1ES PT)
          continueOnError: true
          target:
            container: host
          env:
            SERVICE_CONNECTION_SUBSCRIPTIONID: $(ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID)
            SERVICE_CONNECTION_TENANTID: $(ONEES_SERVICE_CONNECTION_TENANTID)
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            IS_PRODUCTION: false
            TASK_NAME: HelmDeploy@0
            SYSTEM_TEAMPROJECTID: $(System.TeamProjectId)
            SYSTEM_DEFINITIONID: $(System.DefinitionId)
          inputs:
            repoId: bfcb8d3d-7994-4f6e-9671-aae8738534cb
            path: serviceConnectionEnvironmentVerification.ps1
        - task: HelmDeploy@0
          inputs:
            azureSubscriptionEndpoint: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            azureResourceGroup: ci-prod-aks-mac-weu-rg
            kubernetesCluster: ci-prod-aks-mac-weu
            useClusterAdmin: true
            namespace: default
            command: upgrade
            chartType: FilePath
            chartPath: $(Pipeline.Workspace)\ev2Artifact\ev2-drop\azure-monitor-metrics-addon
            releaseName: ama-metrics
            waitForExecution: false
            arguments: --values $(Pipeline.Workspace)\ev2Artifact\ev2-drop\azure-monitor-metrics-addon/values.yaml --dependency-update
          target:
            container: host
          displayName: Deploy to ci-prod-aks-mac-weu
        - task: AzureCLI@2
          displayName: 'Fetch Service Connection Subscription Id (1ES PT)'
          continueOnError: true
          inputs:
            azureSubscription: prometheus-arc-dev-release-mi
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              try {
                $accountInfo = az account show --query "{subscriptionId:id, tenantId:tenantId}" --only-show-errors --output json | ConvertFrom-Json
                Write-Host "Subscription ID: $($accountInfo.subscriptionId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID;]$($accountInfo.subscriptionId)"
                Write-Host "Tenant ID: $($accountInfo.tenantId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_TENANTID;]$($accountInfo.tenantId)"
              } catch {
                Write-Host "Failed to fetch subscription id."
                Write-Host $_.Exception.Message
                exit 0
              }
        - task: 1ESGPTRunTask@3.0.314
          displayName: Service Connection Environment Verification (1ES PT)
          continueOnError: true
          target:
            container: host
          env:
            SERVICE_CONNECTION_SUBSCRIPTIONID: $(ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID)
            SERVICE_CONNECTION_TENANTID: $(ONEES_SERVICE_CONNECTION_TENANTID)
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            IS_PRODUCTION: false
            TASK_NAME: AzureCLI@2
            SYSTEM_TEAMPROJECTID: $(System.TeamProjectId)
            SYSTEM_DEFINITIONID: $(System.DefinitionId)
          inputs:
            repoId: bfcb8d3d-7994-4f6e-9671-aae8738534cb
            path: serviceConnectionEnvironmentVerification.ps1
        - task: AzureCLI@2
          inputs:
            connectedServiceNameARM: prometheus-arc-dev-release-mi
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: " # Create JSON request body\ncat <<EOF > \"request.json\"\n        {\n          \"artifactEndpoints\": [\n              {\n                  \"Regions\": [\n                      \"westcentralus\"\n                  ],\n                  \"Releasetrains\": [\n                      \"pipeline\",\"staging\"\n                  ],\n                  \"FullPathToHelmChart\": \"https://mcr.microsoft.com/azuremonitor/containerinsights/ciprod/ama-metrics-arc\",\n                  \"ExtensionUpdateFrequencyInMinutes\": 5,\n                  \"IsCustomerHidden\": true,\n                  \"ReadyforRollout\": true,\n                  \"RollbackVersion\": null,\n                  \"PackageConfigName\": \"Microsoft.AzureMonitor.Containers.Metrics-Prom041823\"\n              }\n          ]\n        }\nEOF\n      # Send Request\n      export SUBSCRIPTION=\"b9842c7c-1a38-4385-8f39-a51314758bcf\"\n      export RESOURCE_AUDIENCE=\"c699bf69-fb1d-4eaf-999b-99e6b2ae4d85\"\n      export SPN_CLIENT_ID=\"9a4c55e9-576a-450a-88bd-53bd634db38d\"\n      export SPN_TENANT_ID=\"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n      export METHOD=\"PUT\"\n      echo \"Request parameter preparation, SUBSCRIPTION is $SUBSCRIPTION, RESOURCE_AUDIENCE is $RESOURCE_AUDIENCE, CHART_VERSION is $(ChartTag), SPN_CLIENT_ID is $SPN_CLIENT_ID, SPN_TENANT_ID is $SPN_TENANT_ID\"\n      #az login --identity --allow-no-subscriptions\n      #if [ $? -eq 0 ]; then\n       # echo \"Logged in successfully\"\n      #else\n       # echo \"-e error failed to login to az with managed identity credentials\"\n        #exit 1\n      #fi    \n      ACCESS_TOKEN=$(az account get-access-token --resource $RESOURCE_AUDIENCE --query accessToken -o json)\n      if [ $? -eq 0 ]; then\n        echo \"get access token from resource:$RESOURCE_AUDIENCE successfully.\"\n      else\n        echo \"-e error get access token from resource:$RESOURCE_AUDIENCE failed.\"\n        exit 1\n      fi   \n      ACCESS_TOKEN=$(echo $ACCESS_TOKEN | tr -d '\"' | tr -d '\"\\r\\n')\n      echo $ACCESS_TOKEN \n      ARC_API_URL=\"https://eastus2euap.dp.kubernetesconfiguration.azure.com\"\n      EXTENSION_NAME=\"microsoft.azuremonitor.containers.metrics\"\n      API_VERSION=\"2021-05-01\"\n      echo \"start send request\"\n      az rest --method $METHOD --headers \"{\\\"Authorization\\\": \\\"Bearer $ACCESS_TOKEN\\\", \\\"Content-Type\\\": \\\"application/json\\\"}\" --body @request.json --uri $ARC_API_URL/subscriptions/$SUBSCRIPTION/extensionTypeRegistrations/$EXTENSION_NAME/versions/$(ChartTag)?api-version=$API_VERSION\n      if [ $? -eq 0 ]; then\n        echo \"arc extension registered successfully\"\n      else\n        echo \"-e error failed to register arc extension\"\n        exit 1\n      fi"
          target:
            container: host
          displayName: Create Arc staging extension
        - task: AzureCLI@2
          displayName: 'Fetch Service Connection Subscription Id (1ES PT)'
          continueOnError: true
          inputs:
            azureSubscription: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              try {
                $accountInfo = az account show --query "{subscriptionId:id, tenantId:tenantId}" --only-show-errors --output json | ConvertFrom-Json
                Write-Host "Subscription ID: $($accountInfo.subscriptionId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID;]$($accountInfo.subscriptionId)"
                Write-Host "Tenant ID: $($accountInfo.tenantId)"
                Write-Host "##vso[task.setvariable variable=ONEES_SERVICE_CONNECTION_TENANTID;]$($accountInfo.tenantId)"
              } catch {
                Write-Host "Failed to fetch subscription id."
                Write-Host $_.Exception.Message
                exit 0
              }
        - task: 1ESGPTRunTask@3.0.314
          displayName: Service Connection Environment Verification (1ES PT)
          continueOnError: true
          target:
            container: host
          env:
            SERVICE_CONNECTION_SUBSCRIPTIONID: $(ONEES_SERVICE_CONNECTION_SUBSCRIPTIONID)
            SERVICE_CONNECTION_TENANTID: $(ONEES_SERVICE_CONNECTION_TENANTID)
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            IS_PRODUCTION: false
            TASK_NAME: AzureCLI@2
            SYSTEM_TEAMPROJECTID: $(System.TeamProjectId)
            SYSTEM_DEFINITIONID: $(System.DefinitionId)
          inputs:
            repoId: bfcb8d3d-7994-4f6e-9671-aae8738534cb
            path: serviceConnectionEnvironmentVerification.ps1
        - task: AzureCLI@2
          inputs:
            connectedServiceNameARM: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: >-
              az config set extension.use_dynamic_install=yes_without_prompt

              az k8s-extension update --name azuremonitor-metrics --resource-group ci-prod-arc-wcus --cluster-name ci-prod-arc-wcus --cluster-type connectedClusters --version $(ChartTag) --release-train staging
          target:
            container: host
          displayName: Install extension on ci-prod-arc-wcus
