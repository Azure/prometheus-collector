# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# The pool section has been filled with placeholder values, check the following link for guidance: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/onboardingesteams/overview, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_1" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
# Job "Job_2" contains release tasks. Its type has been defined as 'releaseJob'.
trigger: none
name: $(Date:yyyyMMdd).$(Rev:r)
variables:
- name: ACRRegistry
  value: containerinsights.azurecr.io
- name: ARCAdminSubscriptionID
  value: b9842c7c-1a38-4385-8f39-a51314758bcf
- name: ARCHelmChartName
  value: ama-metrics-arc
- name: ARCResourceAudience
  value: c699bf69-fb1d-4eaf-999b-99e6b2ae4d85
- name: ARCSPNClientID
  value: 9a4c55e9-576a-450a-88bd-53bd634db38d
- name: ARCSPNSecret
  value: 
- name: ARCSPNTenant
  value: 72f988bf-86f1-41af-91ab-2d7cd011db47
- name: ChartTag
  value: ''
- name: CI_PROMETHEUS_KV_CLIENTID
  value: 865cdca2-d064-4340-b445-434a01d6436f
- name: CI_PROMETHEUS_KV_CLIENTSECRET
  value: 
- name: ConfigReaderTag
  value: ''
- name: DevMCRAgentRepository
  value: /azuremonitor/containerinsights/cidev/prometheus-collector/images
- name: DevMCRChartRepository
  value: /azuremonitor/containerinsights/cidev/prometheus-collector
- name: DevMCRKSMRepository
  value: /azuremonitor/containerinsights/cidev/kube-state-metrics
- name: DevMCRNERepository
  value: /azuremonitor/containerinsights/cidev/prometheus-node-exporter
- name: HelmChartName
  value: prometheus-collector
- name: KSMChartTag
  value: 5.10.1
- name: LinuxCCPTag
  value: ''
- name: LinuxTag
  value: ''
- name: ManagedIdentity
  value: /subscriptions/30c56c3a-54da-46ea-b004-06eb33432687/resourceGroups/containerinsightsprod/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ev2-agent-release
- name: MCRRegistry
  value: mcr.microsoft.com
- name: NEChartTag
  value: 4.39.0
- name: ProdACRAgentRepository
  value: /public/azuremonitor/containerinsights/ciprod/prometheus-collector/images
- name: ProdACRChartRepository
  value: /public/azuremonitor/containerinsights/ciprod
- name: ProdACRKSMRepository
  value: /public/azuremonitor/containerinsights/ciprod/kube-state-metrics
- name: ProdACRNERepository
  value: /public/azuremonitor/containerinsights/ciprod/prometheus-node-exporter
- name: ProdMCRAgentRepository
  value: /azuremonitor/containerinsights/ciprod/prometheus-collector/images
- name: ProdMCRArcChartRepository
  value: /azuremonitor/containerinsights/ciprod/ama-metrics-arc
- name: ProdMCRChartRepository
  value: /azuremonitor/containerinsights/ciprod/prometheus-collector
- name: ProdMCRKSMRepository
  value: /azuremonitor/containerinsights/ciprod/kube-state-metrics
- name: ProdMCRNERepository
  value: /azuremonitor/containerinsights/ciprod/prometheus-node-exporter
- name: ProdMCRRepositoryHelmDependencies
  value: /azuremonitor/containerinsights/ciprod
- name: PushNewKSMChart
  value: false
- name: PushNewNEChart
  value: false
- name: ServiceTreeGUID
  value: 3170cdd2-19f0-4027-912b-1027311691a2
- name: TargetAllocatorTag
  value: ''
- name: WindowsTag
  value: ''
resources:
  pipelines:
  - pipeline: '_Azureprometheus-collector'
    project: 'azure'
    source: 'Azure.prometheus-collector'
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
        name: Azure-Pipelines-Windows-CI-Test-EO
        os: windows
    serviceTreeId: 3170cdd2-19f0-4027-912b-1027311691a2
    customBuildTags:
    - ES365AIMigrationTooling-Release
    stages:
    - stage: Stage_1
      displayName: Push Images
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_1
        displayName: Push to Prod ACR
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Global",           "bindings": [                       {                   "find": "__ACR_REGISTRY__",                   "replaceWith": "$(ACRRegistry)"               },                           {                   "find": "__PROD_ACR_AGENT_REPOSITORY__",                   "replaceWith": "$(ProdACRAgentRepository)"               },               {                 "find": "__PROD_ACR_CHART_REPOSITORY__",                 "replaceWith": "$(ProdACRChartRepository)"               },               {                 "find": "__PROD_ACR_KSM_REPOSITORY__",                 "replaceWith": "$(ProdACRKSMRepository)"               },               {                 "find": "__PROD_ACR_NE_REPOSITORY__",                 "replaceWith": "$(ProdACRNERepository)"               },               {                 "find": "__MANAGED_IDENTITY__",                 "replaceWith": "$(ManagedIdentity)"               },               {                 "find": "__MCR_REGISTRY__",                 "replaceWith": "$(MCRRegistry)"               },               {                 "find": "__DEV_MCR_AGENT_REPOSITORY__",                 "replaceWith": "$(DevMCRAgentRepository)"               },               {                 "find": "__DEV_MCR_KSM_REPOSITORY__",                 "replaceWith": "$(DevMCRKSMRepository)"               },               {                 "find": "__DEV_MCR_NE_REPOSITORY__",                 "replaceWith": "$(DevMCRNERepository)"               },               {                   "find": "__LINUX_TAG__",                   "replaceWith": "$(LinuxTag)"               }, {           "find": "__LINUX_CCP_TAG__",           "replaceWith": "$(LinuxCCPTag)"         },               {                   "find": "__WINDOWS_TAG__",                   "replaceWith": "$(WindowsTag)"               },               {                 "find": "__TARGETALLOCATOR_TAG__",                 "replaceWith": "$(TargetAllocatorTag)"               },               {                 "find": "__CONFIGREADER_TAG__",                 "replaceWith": "$(ConfigReaderTag)"               },               {                 "find": "__PROD_MCR_AGENT_REPOSITORY__",                 "replaceWith": "$(ProdMCRAgentRepository)"               },               {                 "find": "__DEV_MCR_CHART_REPOSITORY__",                 "replaceWith": "$(DevMCRChartRepository)"               },               {                 "find": "__PROD_MCR_CHART_REPOSITORY__",                 "replaceWith": "$(ProdMCRChartRepository)"               },               {                 "find": "__PROD_MCR_KSM_REPOSITORY__",                 "replaceWith": "$(ProdMCRKSMRepository)"               },               {                 "find": "__PROD_MCR_NE_REPOSITORY__",                 "replaceWith": "$(ProdMCRNERepository)"               },               {                 "find": "__PROD_MCR_REPOSITORY_HELM_DEPENDENCIES__",                 "replaceWith": "$(ProdMCRRepositoryHelmDependencies)"               },               {                 "find": "__CHART_TAG__",                 "replaceWith": "$(ChartTag)"               },               {                 "find": "__PUSH_NEW_KSM_CHART__",                 "replaceWith": "$(PushNewKSMChart)"               },               {                 "find": "__PUSH_NEW_NE_CHART__",                 "replaceWith": "$(PushNewNEChart)"               },               {                 "find": "__KSM_CHART_TAG__",                 "replaceWith": "$(KSMChartTag)"               },               {                 "find": "__NE_CHART_TAG__",                 "replaceWith": "$(NEChartTag)"               },               {                 "find": "__HELM_CHART_NAME__",                 "replaceWith": "$(HelmChartName)"               },               {                 "find": "__ARC_HELM_CHART_NAME__",                 "replaceWith": "$(ARCHelmChartName)"               }           ]       }                                                                                                                                                   ] }'
    - stage: Stage_2
      displayName: Deploy to Prod Clusters
      dependsOn: Stage_1
      jobs:
      - job: Job_1
        displayName: Deploy to Prod Clusters
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          isProduction: true
        steps:
        - task: HelmInstaller@0
          displayName: Install Helm 3.12.3
          inputs:
            helmVersion: 3.12.3
            checkLatestHelmVersion: false
        - task: Bash@3
          displayName: Check images and ARC chart are pushed to MCR
          inputs:
            targetType: inline
            script: |-
              cd $(System.DefaultWorkingDirectory)/_Azure.prometheus-collector/drop/arc-chart/
              CHART_TAG=$(jq '."image.name"' metadata.json | tr -d '"' | cut -d':' -f2)
              echo $CHART_TAG
              set +x
              echo "##vso[task.setvariable variable=ChartTag;]$CHART_TAG"
              set -x
              LINUX_TAG=$CHART_TAG
              echo $LINUX_TAG
              set +x
              echo "##vso[task.setvariable variable=LinuxTag;]$LINUX_TAG"
              set -x
              WINDOWS_TAG=$LINUX_TAG-win
              echo $WINDOWS_TAG
              set +x
              echo "##vso[task.setvariable variable=WindowsTag;]$WINDOWS_TAG"
              set -x
              cd $(System.DefaultWorkingDirectory)
              for i in 1 2 3 4 5 6 7 8 9 10         
                  do            
                  sleep 30
                  echo $(MCRRegistry)$(ProdMCRAgentRepository):$LINUX_TAG
                  echo $(MCRRegistry)$(ProdMCRAgentRepository):$WINDOWS_TAG
                  echo $(MCRRegistry)$(ProdMCRChartRepository):$CHART_TAG
                  output1=$(curl -s https://$(MCRRegistry)/v2$(ProdMCRAgentRepository)/tags/list)
                  output2=$(curl -s https://$(MCRRegistry)/v2$(ProdMCRArcChartRepository)/tags/list)
                   if (echo $output1 | grep $LINUX_TAG) && (echo $output1 | grep $WINDOWS_TAG) && (echo $output2 | grep $CHART_TAG)
                   then
                           echo "Images and chart are published to mcr"
                           exit 0
                    fi
              done          
              echo "Images and chart are not published to mcr within 5 minutes"
              exit 1
            workingDirectory: $(System.DefaultWorkingDirectory)
        - task: HelmDeploy@0
          displayName: Deploy to ci-prod-aks-mac-weu
          inputs:
            azureSubscriptionEndpoint: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            azureResourceGroup: ci-prod-aks-mac-weu-rg
            kubernetesCluster: ci-prod-aks-mac-weu
            useClusterAdmin: true
            namespace: default
            command: upgrade
            chartType: FilePath
            chartPath: $(System.DefaultWorkingDirectory)/_Azure.prometheus-collector/drop/azure-monitor-metrics-addon/
            releaseName: ama-metrics
            waitForExecution: false
            arguments: --values $(System.DefaultWorkingDirectory)/_Azure.prometheus-collector/drop/azure-monitor-metrics-addon/values.yaml --dependency-update
        - task: AzureCLI@2
          displayName: Create Arc staging extension
          inputs:
            connectedServiceNameARM: prometheus-arc-dev-release-mi
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |2-
               # Create JSON request body
              cat <<EOF > "request.json"
                      {
                        "artifactEndpoints": [
                            {
                                "Regions": [
                                    "westcentralus"
                                ],
                                "Releasetrains": [
                                    "pipeline","staging"
                                ],
                                "FullPathToHelmChart": "https://mcr.microsoft.com/azuremonitor/containerinsights/ciprod/ama-metrics-arc",
                                "ExtensionUpdateFrequencyInMinutes": 5,
                                "IsCustomerHidden": true,
                                "ReadyforRollout": true,
                                "RollbackVersion": null,
                                "PackageConfigName": "Microsoft.AzureMonitor.Containers.Metrics-Prom041823"
                            }
                        ]
                      }
              EOF
                    # Send Request
                    export SUBSCRIPTION="b9842c7c-1a38-4385-8f39-a51314758bcf"
                    export RESOURCE_AUDIENCE="c699bf69-fb1d-4eaf-999b-99e6b2ae4d85"
                    export SPN_CLIENT_ID="9a4c55e9-576a-450a-88bd-53bd634db38d"
                    export SPN_TENANT_ID="72f988bf-86f1-41af-91ab-2d7cd011db47"
                    export METHOD="PUT"
                    echo "Request parameter preparation, SUBSCRIPTION is $SUBSCRIPTION, RESOURCE_AUDIENCE is $RESOURCE_AUDIENCE, CHART_VERSION is $(ChartTag), SPN_CLIENT_ID is $SPN_CLIENT_ID, SPN_TENANT_ID is $SPN_TENANT_ID"
                    #az login --identity --allow-no-subscriptions
                    #if [ $? -eq 0 ]; then
                     # echo "Logged in successfully"
                    #else
                     # echo "-e error failed to login to az with managed identity credentials"
                      #exit 1
                    #fi    
                    ACCESS_TOKEN=$(az account get-access-token --resource $RESOURCE_AUDIENCE --query accessToken -o json)
                    if [ $? -eq 0 ]; then
                      echo "get access token from resource:$RESOURCE_AUDIENCE successfully."
                    else
                      echo "-e error get access token from resource:$RESOURCE_AUDIENCE failed."
                      exit 1
                    fi   
                    ACCESS_TOKEN=$(echo $ACCESS_TOKEN | tr -d '"' | tr -d '"\r\n')
                    echo $ACCESS_TOKEN 
                    ARC_API_URL="https://eastus2euap.dp.kubernetesconfiguration.azure.com"
                    EXTENSION_NAME="microsoft.azuremonitor.containers.metrics"
                    API_VERSION="2021-05-01"
                    echo "start send request"
                    az rest --method $METHOD --headers "{\"Authorization\": \"Bearer $ACCESS_TOKEN\", \"Content-Type\": \"application/json\"}" --body @request.json --uri $ARC_API_URL/subscriptions/$SUBSCRIPTION/extensionTypeRegistrations/$EXTENSION_NAME/versions/$(ChartTag)?api-version=$API_VERSION
                    if [ $? -eq 0 ]; then
                      echo "arc extension registered successfully"
                    else
                      echo "-e error failed to register arc extension"
                      exit 1
                    fi
        - task: AzureCLI@2
          displayName: Install extension on ci-prod-arc-wcus
          inputs:
            connectedServiceNameARM: ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |-
              az config set extension.use_dynamic_install=yes_without_prompt
              az k8s-extension update --name azuremonitor-metrics --resource-group ci-prod-arc-wcus --cluster-name ci-prod-arc-wcus --cluster-type connectedClusters --version $(ChartTag) --release-train staging
    - stage: Stage_3
      displayName: ARC Small Region Release
      trigger: manual
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "small"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_4
      displayName: ARC Medium Region Release
      dependsOn: Stage_3
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "medium"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_5
      displayName: ARC Large Region Release
      dependsOn: Stage_4
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "large"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_6
      displayName: ARC Batch 1 Region Release
      dependsOn: Stage_5
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "batch1"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_7
      displayName: ARC Batch 2 Region Release
      dependsOn: Stage_6
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "batch2"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_8
      displayName: ARC Batch 3 Region Release
      dependsOn: Stage_7
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "batch3"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'
    - stage: Stage_9
      displayName: ARC Batch 4 Region Release
      dependsOn: Stage_8
      templateContext:
        cloud: Public
        isProduction: true
        approval:
          workflow: approvalService
      jobs:
      - job: Job_2
        displayName: Release Extension
        condition: succeeded()
        timeoutInMinutes: 0
        templateContext:
          type: releaseJob
          workflow: ev2-classic
          inputs:
            - input: pipelineArtifact
              pipeline: _Azureprometheus-collector
              artifactName: Ev2Artifact
          ev2:
            useServerMonitorTask: true
            serviceRootPath: ServiceGroupRoot
            rolloutSpecPath: RolloutSpecs.json
            inlineScopeBindingOverrides: '{   "$schema": "https://ev2schema.azure.net/schemas/2020-01-01/scopeBindings.json",   "contentVersion": "0.0.0.1",   "scopeBindings": [              {           "scopeTagName": "Stable",           "bindings": [               {                   "find": "__ADMIN_SUBSCRIPTION_ID__",                   "replaceWith": "$(ARCAdminSubscriptionID)"               },               {                   "find": "__CHART_VERSION__",                   "replaceWith": "$(ChartTag)"               },               {                   "find": "__IS_CUSTOMER_HIDDEN__",                   "replaceWith": "false"               },               {                   "find": "__REGIONS_BATCH_NAME__",                   "replaceWith": "batch4"               },               {                   "find": "__RESOURCE_AUDIENCE__",                   "replaceWith": "$(ARCResourceAudience)"               },               {                   "find": "__SPN_CLIENT_ID__",                   "replaceWith": "$(ARCSPNClientID)"               },               {                   "find": "__SPN_SECRET__",                   "replaceWith": "$(ARCSPNSecret)"               },               {                   "find": "__SPN_TENANT_ID__",                   "replaceWith": "$(ARCSPNTenant)"               },                {                   "find": "__MANAGED_IDENTITY__",                   "replaceWith": "$(ManagedIdentity)"               }           ]       }                                                                                                                                            ] }'