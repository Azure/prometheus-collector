trigger:
  branches:
    include:
    - main
    - esrpUpdateSvcConnectionTestBranch

pr:
  autoCancel: true
  branches:
    include:
    - main

variables:
  HELM_CHART_NAME: 'prometheus-collector'
  ARC_HELM_CHART_NAME: 'ama-metrics-arc'
  ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
  ACR_REPOSITORY: '/public/azuremonitor/containerinsights/cidev/prometheus-collector/images'
  ACR_REPOSITORY_HELM: '/public/azuremonitor/containerinsights/cidev'
  MCR_REGISTRY: 'mcr.microsoft.com'
  MCR_REPOSITORY: '/azuremonitor/containerinsights/cidev/prometheus-collector/images'
  MCR_REPOSITORY_HELM: '/azuremonitor/containerinsights/cidev/prometheus-collector'
  MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/containerinsights/cidev'
  KUBE_STATE_METRICS_IMAGE: 'mcr.microsoft.com/oss/kubernetes/kube-state-metrics:v2.9.2'
  NODE_EXPORTER_IMAGE: 'mcr.microsoft.com/oss/prometheus/node-exporter:v1.6.0'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]
  IS_MAIN_BRANCH: $[eq(variables['Build.SourceBranchName'], 'main')]

stages:
- stage: Build
  jobs:
  - job: Image_Tags_and_Ev2_Artifacts
    displayName: "Build: Set image tags and publish Ev2 artifacts"
    pool:
      name: Azure-Pipelines-CI-Test-EO
    variables:
      skipComponentGovernanceDetection: true
    steps:
      - checkout: self
        submodules: true
      - bash: |
          if [ $(IS_PR) == "True" ]; then
            BRANCH_NAME=$(System.PullRequest.SourceBranch)
          else
            BRANCH_NAME=$(Build.SourceBranch)
            BRANCH_NAME=${BRANCH_NAME#refs/heads/}
          fi
          BRANCH_NAME=$(echo $BRANCH_NAME | tr / - | tr . - | tr _ - | cut -c1-90)
          COMMIT_SHA=$(echo $(Build.SourceVersion) | cut -b -8)
          DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
          VERSION=$(cat $(Build.SourcesDirectory)/otelcollector/VERSION)
          SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA

          LINUX_IMAGE_TAG=$SEMVER
          # Truncating to 128 characters as it is required by docker
          LINUX_IMAGE_TAG=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-128)
                  
          #Truncating this to 124 to add the cfg suffix
          LINUX_IMAGE_TAG_PREFIX=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-124)
          LINUX_CONFIG_READER_IMAGE_TAG=$LINUX_IMAGE_TAG_PREFIX-cfg
          LINUX_CCP_IMAGE_TAG=$LINUX_IMAGE_TAG_PREFIX-ccp
          LINUX_CCP_IMAGE_TAG=$LINUX_IMAGE_TAG_PREFIX-ccp

          #Truncating this to 113 to add the ref app suffices
          LINUX_REF_APP_IMAGE_TAG_PREFIX=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-113)
          LINUX_REF_APP_GOLANG_IMAGE_TAG=$LINUX_REF_APP_IMAGE_TAG_PREFIX-ref-app-golang
          LINUX_REF_APP_PYTHON_IMAGE_TAG=$LINUX_REF_APP_IMAGE_TAG_PREFIX-ref-app-python

          # Truncating to 115 characters as it is required by docker (4 characters used in -win and 9 characters used in -ltsc2019/-ltsc2022)
          WINDOWS_IMAGE_TAG_PREFIX=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-115)
          WINDOWS_IMAGE_TAG=$WINDOWS_IMAGE_TAG_PREFIX-win


          #Truncating this to 112 characters to add the targetallocator suffix
          TARGET_ALLOCATOR_IMAGE_TAG_PREFIX=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-112)
          TARGET_ALLOCATOR_IMAGE_TAG=$TARGET_ALLOCATOR_IMAGE_TAG_PREFIX-targetallocator

          #Truncating this to 113 to add the ref app suffices
          WIN_REF_APP_IMAGE_TAG_PREFIX=$(echo "${LINUX_IMAGE_TAG}" | cut -c1-107)
          WIN_REF_APP_GOLANG_IMAGE_TAG=$WIN_REF_APP_IMAGE_TAG_PREFIX-win-ref-app-golang
          WIN_REF_APP_PYTHON_IMAGE_TAG=$WIN_REF_APP_IMAGE_TAG_PREFIX-win-ref-app-python

          # Truncating to 119 characters as it is required by docker (9 characters used in -ltsc2019/-ltsc2022)
          WINDOWS_2019_BASE_IMAGE_VERSION=ltsc2019
          WINDOWS_2022_BASE_IMAGE_VERSION=ltsc2022

          LINUX_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_IMAGE_TAG
          TARGET_ALLOCATOR_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$TARGET_ALLOCATOR_IMAGE_TAG
          LINUX_CONFIG_READER_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_CONFIG_READER_IMAGE_TAG
          LINUX_CCP_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_CCP_IMAGE_TAG
          WINDOWS_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WINDOWS_IMAGE_TAG
          HELM_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM/$HELM_CHART_NAME:$SEMVER
          ARC_HELM_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM/$ARC_HELM_CHART_NAME:$SEMVER
          LINUX_REF_APP_GOLANG_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_REF_APP_GOLANG_IMAGE_TAG
          LINUX_REF_APP_PYTHON_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_REF_APP_PYTHON_IMAGE_TAG
          WINDOWS_REF_APP_GOLANG_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WIN_REF_APP_GOLANG_IMAGE_TAG
          WINDOWS_REF_APP_PYTHON_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WIN_REF_APP_PYTHON_IMAGE_TAG

          echo "##vso[build.updatebuildnumber]$SEMVER"
          echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
          echo "##vso[task.setvariable variable=LINUX_FULL_IMAGE_NAME;isOutput=true]$LINUX_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=TARGET_ALLOCATOR_IMAGE_TAG;isOutput=true]$TARGET_ALLOCATOR_IMAGE_TAG"
          echo "##vso[task.setvariable variable=LINUX_CONFIG_READER_IMAGE_TAG;isOutput=true]$LINUX_CONFIG_READER_IMAGE_TAG"
          echo "##vso[task.setvariable variable=TARGET_ALLOCATOR_FULL_IMAGE_NAME;isOutput=true]$TARGET_ALLOCATOR_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=LINUX_CONFIG_READER_FULL_IMAGE_NAME;isOutput=true]$LINUX_CONFIG_READER_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=LINUX_CCP_FULL_IMAGE_NAME;isOutput=true]$LINUX_CCP_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=WINDOWS_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=LINUX_REF_APP_GOLANG_FULL_IMAGE_NAME;isOutput=true]$LINUX_REF_APP_GOLANG_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=LINUX_REF_APP_PYTHON_FULL_IMAGE_NAME;isOutput=true]$LINUX_REF_APP_PYTHON_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=WINDOWS_REF_APP_GOLANG_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_REF_APP_GOLANG_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=WINDOWS_REF_APP_PYTHON_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_REF_APP_PYTHON_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=WINDOWS_IMAGE_TAG;isOutput=true]$WINDOWS_IMAGE_TAG"
          echo "##vso[task.setvariable variable=WINDOWS_2019_BASE_IMAGE_VERSION;isOutput=true]$WINDOWS_2019_BASE_IMAGE_VERSION"
          echo "##vso[task.setvariable variable=WINDOWS_2022_BASE_IMAGE_VERSION;isOutput=true]$WINDOWS_2022_BASE_IMAGE_VERSION"
          echo "##vso[task.setvariable variable=HELM_CHART_NAME;isOutput=true]$HELM_CHART_NAME"
          echo "##vso[task.setvariable variable=ARC_HELM_CHART_NAME;isOutput=true]$ARC_HELM_CHART_NAME"
          echo "##vso[task.setvariable variable=HELM_FULL_IMAGE_NAME;isOutput=true]$HELM_FULL_IMAGE_NAME"
          echo "##vso[task.setvariable variable=ARC_HELM_FULL_IMAGE_NAME;isOutput=true]$ARC_HELM_FULL_IMAGE_NAME"
        displayName: 'Build: set image registry, repo, and tags'
        name: setup

      - bash: |
          cd $(Build.SourcesDirectory)/.pipelines/deployment/ServiceGroupRoot/Scripts
          cp ../../../../otelcollector/deploy/chart/prometheus-collector prometheus-collector -r
          cp ../../../../otelcollector/deploy/addon-chart/azure-monitor-metrics-addon ama-metrics-arc -r
          export MCR_REPOSITORY='/azuremonitor/containerinsights/ciprod/prometheus-collector/images'
          export MCR_REPOSITORY_HELM_DEPENDENCIES='/azuremonitor/containerinsights/ciprod'
          export HELM_SEMVER=$SETUP_SEMVER
          export IMAGE_TAG=$SETUP_SEMVER
          export IMAGE_TAG_WINDOWS=$SETUP_WINDOWS_IMAGE_TAG
          env

          envsubst < prometheus-collector/Chart-template.yaml > prometheus-collector/Chart.yaml && envsubst < prometheus-collector/values-template.yaml > prometheus-collector/values.yaml
          export ARC_EXTENSION=true
          export HELM_CHART_NAME=$ARC_HELM_CHART_NAME
          envsubst < ama-metrics-arc/Chart-template.yaml > ama-metrics-arc/Chart.yaml && envsubst < ama-metrics-arc/values-template.yaml > ama-metrics-arc/values.yaml
          tar -czvf ../artifacts.tar.gz pushAgentToAcr.sh pushChartToAcr.sh prometheus-collector ama-metrics-arc

          cd $(Build.ArtifactStagingDirectory)
          cp $(Build.SourcesDirectory)/otelcollector/deploy/addon-chart/azure-monitor-metrics-addon azure-monitor-metrics-addon -r
          export HELM_CHART_NAME="ama-metrics"
          export ARC_EXTENSION=false
          export AKS_REGION="westeurope"
          export AKS_RESOURCE_ID="/subscriptions/9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb/resourceGroups/ci-prod-aks-mac-weu-rg/providers/Microsoft.ContainerService/managedClusters/ci-prod-aks-mac-weu"
          envsubst < azure-monitor-metrics-addon/Chart-template.yaml > azure-monitor-metrics-addon/Chart.yaml && envsubst < azure-monitor-metrics-addon/values-template.yaml > azure-monitor-metrics-addon/values.yaml
        displayName: 'Ev2: package artifacts.tar.gz for prod release'

      - bash: |
          cd $(Build.SourcesDirectory)/.pipelines/deployment/arc-extension-release/ServiceGroupRoot/Scripts
          tar -czvf ../extension-artifacts.tar.gz arcExtensionRelease.sh
        displayName: 'Ev2: package extension-artifacts.tar.gz for prod release'

      - task: CredScan@3
        displayName: "SDL : Run credscan"

      - task: CopyFiles@2
        displayName: "Ev2: copy Ev2 deployment artifacts to staging directory"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/.pipelines/deployment"
          Contents: |
            **/*
          TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'

      - task: PublishBuildArtifacts@1
        displayName: "Ev2: publish Ev2 deployment artifacts"
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: drop


  - job: SDL_Policheck_Scan
    displayName: "SDL: policheck scanning"
    pool:
      name: Azure-Pipelines-Windows-CI-Test-EO
    variables:
      skipComponentGovernanceDetection: true
    steps:
      - checkout: self
        submodules: true

      - task: PoliCheck@2
        displayName: "SDL : Run PoliCheck"
        inputs:
          targetType: 'F'
          targetArgument: '$(Build.SourcesDirectory)'


  - job: SDL_Binary_Scan
    displayName: "SDL: linux binary scanning"
    pool:
      name: Azure-Pipelines-CI-Test-EO
    variables:
      skipComponentGovernanceDetection: true
    steps:
      - checkout: self
        submodules: true

      - task: CodeQL3000Init@0
        displayName: 'SDL: init codeql'

      - task: GoTool@0
        displayName: "Build: specify golang version"
        inputs:
          version: '1.21.5'

      - bash: |
          sudo apt-get install build-essential -y
          make
        workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
        displayName: "SDL: build otelcollector, promconfigvalidator, targetallocator, and fluent-bit plugin for scanning"
        retryCountOnTaskFailure: 1

      - task: BinSkim@4
        displayName: 'SDL: run binskim'
        inputs:
          InputType: 'CommandLine'
          arguments: 'analyze --rich-return-code $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/otelcollector $(Build.SourcesDirectory)/otelcollector/prom-config-validator-builder/promconfigvalidator $(Build.SourcesDirectory)/otelcollector/otel-allocator/targetallocator $(Build.SourcesDirectory)/otelcollector/fluent-bit/src/out_appinsights.so'
        retryCountOnTaskFailure: 1

      - task: ESLint@1
        displayName: 'Run ESLint'
        inputs:
          Configuration: required
          EnableExclusions: false
        retryCountOnTaskFailure: 1 

      - task: Armory@2
        displayName: 'Run ARMory'
        inputs:
          toolVersion: Latest
          targetDirectory: '$(Build.SourcesDirectory)'
        retryCountOnTaskFailure: 1   

      - task: Gosec@1
        displayName: 'SDL: run gosec'
        inputs:
          targetPattern: 'gosecPattern'
          targetGosecPattern: '$(Build.SourcesDirectory)/otelcollector'
        retryCountOnTaskFailure: 1

      - bash: |
          wget https://github.com/microsoft/DevSkim/releases/download/v0.6.9/DevSkim_linux_0.6.9.zip
          unzip DevSkim_linux_0.6.9.zip
          chmod 775 DevSkim_linux_0.6.9/devskim
          ./DevSkim_linux_0.6.9/devskim analyze $(Build.SourcesDirectory)/otelcollector --ignore-globs **/deploy/dashboard/**,**/react/static/** --severity critical,important
        displayName: 'SDL: run devskim'
        workingDirectory: $(Build.SourcesDirectory)
        retryCountOnTaskFailure: 1

      - bash: |
          sudo gem install brakeman -v 5.4.1
          brakeman $(Build.SourcesDirectory)/otelcollector/configmapparser --force
        displayName: 'SDL: run brakeman'
        retryCountOnTaskFailure: 1

  - job: Linux_Prometheus_Collector
    displayName: "Build: linux prometheus-collector image"
    pool:
      name: Azure-Pipelines-CI-Test-EO
    dependsOn: Image_Tags_and_Ev2_Artifacts
    variables:
      LINUX_FULL_IMAGE_NAME: $[ dependencies.Image_Tags_and_Ev2_Artifacts.outputs['setup.LINUX_FULL_IMAGE_NAME'] ]
    # This is necessary because of: https://github.com/moby/moby/issues/37965
      DOCKER_BUILDKIT: 1
    steps:
      - checkout: self
        submodules: true

      - task: CodeQL3000Init@0
        displayName: 'SDL: init codeql'

      - task: GoTool@0
        displayName: "Build: specify golang version"
        inputs:
          version: '1.20'

      - bash: |
          mkdir -p $(Build.ArtifactStagingDirectory)/linux

          # Necessary due to necessary due to https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx
          sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static
          docker system prune --all -f
          docker images -q --filter "dangling=true" | xargs docker rmi
          docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          docker buildx create --name dockerbuilder
          docker buildx use dockerbuilder
          docker buildx build . --platform=linux/amd64,linux/arm64 --file ./build/linux/Dockerfile -t $(LINUX_FULL_IMAGE_NAME) --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --push # --cache-to type=registry,ref=$(ACR_REGISTRY)$(ACR_REPOSITORY)/cache:prometheuscollector,mode=max --cache-from type=registry,ref=$(ACR_REGISTRY)$(ACR_REPOSITORY)/cache:prometheuscollector
          docker pull $(LINUX_FULL_IMAGE_NAME)
          docker system prune --all -f
        workingDirectory: $(Build.SourcesDirectory)/otelcollector/
        displayName: "Build: build and push image to dev ACR"

      - bash: |
          MEDIA_TYPE=$(docker manifest inspect -v $(LINUX_FULL_IMAGE_NAME) | jq '.Descriptor.mediaType')
          DIGEST=$(docker manifest inspect -v $(LINUX_FULL_IMAGE_NAME) | jq '.Descriptor.digest')
          SIZE=$(docker manifest inspect -v $(LINUX_FULL_IMAGE_NAME) | jq '.Descriptor.size')
          cat <<EOF >>$(Build.ArtifactStagingDirectory)/linux/payload.json
          {"targetArtifact":{"mediaType":$MEDIA_TYPE,"digest":$DIGEST,"size":$SIZE}}
          EOF
        workingDirectory: $(Build.SourcesDirectory)/otelcollector/
        displayName: "Build: Set values in payload.json for signing"
        condition: succeeded()

      - task: EsrpCodeSigning@5
        inputs:
          ConnectedServiceName: 'ESRPServiceConnectionPrometheus'
          AppRegistrationClientId: '73f8d5f9-b507-497f-b698-4ed00fcba5a3'
          AppRegistrationTenantId: '72f988bf-86f1-41af-91ab-2d7cd011db47'
          AuthAKVName: 'ESRPPrometheusKVProd'
          AuthCertName: 'ESRPReqPrometheusProdCert'
          AuthSignCertName: ''
          FolderPath: '$(Build.ArtifactStagingDirectory)/linux/'
          Pattern: '*.json'
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
                          {
                              "keyCode": "CP-469451",
                              "operationSetCode": "NotaryCoseSign",
                              "parameters": [
                                {
                                  "parameterName": "CoseFlags",
                                  "parameterValue": "chainunprotected"
                                }
                              ],
                              "toolName": "sign",
                              "toolVersion": "1.0"
                          }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'
          PendingAnalysisWaitTimeoutMinutes: '5'

      - bash: |
          set -euxo pipefail
          curl -LO "https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_1.0.0_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_1.0.0_*.tar.gz oras-install/
          oras attach $(LINUX_FULL_IMAGE_NAME) \
            --artifact-type 'application/vnd.cncf.notary.signature' \
            ./payload.json:application/cose \
            -a "io.cncf.notary.x509chain.thumbprint#S256=[\"79E6A702361E1F60DAA84AEEC4CBF6F6420DE6BA\"]"
          oras attach $(LINUX_FULL_IMAGE_NAME) \
            --artifact-type 'application/vnd.microsoft.artifact.lifecycle' \
            --annotation "vnd.microsoft.artifact.lifecycle.end-of-life.date=$(date -u -d '-1 hour' +"%Y-%m-%dT%H:%M:%SZ")"
        workingDirectory: $(Build.ArtifactStagingDirectory)/linux/
        displayName: "ORAS Push Artifacts in $(Build.ArtifactStagingDirectory)/linux/"
        condition: succeeded()

      - bash: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(LINUX_FULL_IMAGE_NAME)
          if [ $? -ne 0 ]; then
            exit 1
          fi
          trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(KUBE_STATE_METRICS_IMAGE)
          if [ $? -ne 0 ]; then
            exit 1
          fi
          trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(NODE_EXPORTER_IMAGE)
          if [ $? -ne 0 ]; then
            exit 1
          fi
        workingDirectory: $(Build.SourcesDirectory)
        displayName: "Build: run trivy scan"

      - task: CodeQL3000Finalize@0
        displayName: 'SDL: run codeql'

      - task: ComponentGovernanceComponentDetection@0
        displayName: "SDL: run component governance"
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          dockerImagesToScan: '$(LINUX_FULL_IMAGE_NAME)'
          alertWarningLevel: 'High'
          sourceScanPath: '$(Build.SourcesDirectory)/otelcollector'
          ignoreDirectories: '$(Build.SourcesDirectory)/mixins,$(Build.SourcesDirectory)/tools,$(Build.SourcesDirectory)/otelcollector/react'

      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: "Ev2: Generate image artifacts"
        condition: and(succeeded(), and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true)))
        inputs:
          BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
          DockerImagesToScan: '$(LINUX_FULL_IMAGE_NAME)'

      - task: SdtReport@2
        displayName: 'SDL: generate report'
        inputs:
          GdnExportAllTools: false
          GdnExportGdnToolBinSkim: true
          GdnExportGdnToolBinSkimSeverity: 'Note'
          GdnExportGdnToolGosec: true
          GdnExportGdnToolGosecSeverity: 'Note'
          GdnExportGdnToolSemmle: true
          GdnExportGdnToolSemmleSeverity: 'Note'

      - task: PublishSecurityAnalysisLogs@3
        displayName: 'SDL: publish report'
        inputs:
          ArtifactName: 'CodeAnalysisLogs'
          ArtifactType: 'Container'
          PublishProcessedResults: true
          AllTools: true
          ToolLogsNotFoundAction: 'Standard'

      - task: PublishBuildArtifacts@1
        displayName: "Ev2: Publish image artifacts"
        condition: and(succeeded(), and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true)))
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: drop

      - task: PostAnalysis@2
        displayName: 'SDL: Post-Build Analysis'
        inputs:
          GdnBreakAllTools: false
          GdnBreakGdnToolBinSkim: true
          GdnBreakGdnToolBinSkimSeverity: 'Warning'
          GdnBreakGdnToolGosec: true
          GdnBreakGdnToolGosecSeverity: 'Warning'
          GdnBreakGdnToolSemmle: true
          GdnBreakGdnToolSemmleSeverity: 'Warning'
