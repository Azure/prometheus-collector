trigger:
  batch: true
  branches:
    include:
    - azure-pipelines
    - grace/test-pipeline-pr

pr:
  autoCancel: true
  branches:
    include:
    - main

variables:
  HELM_CHART_NAME: 'prometheus-collector'
  ACR_REGISTRY: 'containerinsightsprod.azurecr.io'
  ACR_REPOSITORY: '/public/azuremonitor/containerinsights/cidev/prometheus-collector/images'
  ACR_REPOSITORY_HELM: '/public/azuremonitor/containerinsights/cidev'
  MCR_REGISTRY: 'mcr.microsoft.com'
  MCR_REPOSITORY: '/azuremonitor/containerinsights/cidev/prometheus-collector/images'
  MCR_REPOSITORY_HELM: '/azuremonitor/containerinsights/cidev/prometheus-collector'
  MCR_REPOSITORY_HELM_DEPENDENCIES: '/azuremonitor/containerinsights/cidev'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]
  IS_MAIN_BRANCH: $[eq(variables['Build.SourceBranchName'], 'main')]
  Codeql.Enabled: true

jobs:
- job: Common
  displayName: Set image tags and publish Ev2 artifacts
  pool:
    vmImage: ubuntu-latest
  steps:
    - bash: |
        if [ $(IS_PR) == "True" ]; then
          BRANCH_NAME=$(System.PullRequest.SourceBranch)
        else
          BRANCH_NAME=$(Build.SourceBranchName)
        fi
        BRANCH_NAME=$(echo $BRANCH_NAME | tr / - | tr . - | tr _ - | cut -c1-90)
        COMMIT_SHA=$(echo $(Build.SourceVersion) | cut -b -8)
        DATE=$(TZ=America/Los_Angeles date +%m-%d-%Y)
        VERSION=$(cat $(Build.SourcesDirectory)/otelcollector/VERSION)
        SEMVER=$VERSION-$BRANCH_NAME-$DATE-$COMMIT_SHA

        LINUX_IMAGE_TAG=$SEMVER
        WINDOWS_IMAGE_TAG=$SEMVER-win

        LINUX_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$LINUX_IMAGE_TAG
        WINDOWS_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY:$WINDOWS_IMAGE_TAG
        HELM_FULL_IMAGE_NAME=$ACR_REGISTRY$ACR_REPOSITORY_HELM/$HELM_CHART_NAME:$SEMVER

        echo "##vso[build.updatebuildnumber]$SEMVER"
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=LINUX_FULL_IMAGE_NAME;isOutput=true]$LINUX_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS_FULL_IMAGE_NAME;isOutput=true]$WINDOWS_FULL_IMAGE_NAME"
        echo "##vso[task.setvariable variable=WINDOWS_IMAGE_TAG;isOutput=true]$WINDOWS_IMAGE_TAG"
        echo "##vso[task.setvariable variable=HELM_CHART_NAME;isOutput=true]$HELM_CHART_NAME"
        echo "##vso[task.setvariable variable=HELM_FULL_IMAGE_NAME;isOutput=true]$HELM_FULL_IMAGE_NAME"

        cd $(Build.SourcesDirectory)/.pipelines/deployment/ServiceGroupRoot/Scripts
        tar -czvf ../artifacts.tar.gz pushAgentToAcr.sh

      displayName: 'Set image registry, repo, and tags'
      name: setup
    - task: CopyFiles@2
      displayName: "Copy Ev2 deployment artifacts to staging directory"
      inputs:
        SourceFolder: "$(Build.SourcesDirectory)/.pipelines/deployment"
        Contents: |
          **/*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'
    - task: PublishBuildArtifacts@1
      displayName: "Publish Ev2 deployment artifacts"
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

- job: Linux
  displayName: Build linux image
  pool:
    vmImage: ubuntu-latest
  dependsOn: common
  variables:
    LINUX_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.LINUX_FULL_IMAGE_NAME'] ]
  steps:
    - bash: |
        sudo apt-get install build-essential -y
        make
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: "Build otelcollector, promconfigvalidator, and fluent-bit plugin"
    - task: BinSkim@4
      displayName: 'SDL: run binskim'
      inputs:
        InputType: 'Basic'
        Function: 'analyze'
        TargetPattern: 'binskimPattern'
        AnalyzeTargetBinskim: |
          $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/otelcollector 
          $(Build.SourcesDirectory)/otelcollector/prom-config-validator-builder/promconfigvalidator
          $(Build.SourcesDirectory)/otelcollector/fluent-bit/src/out_appinsights.so
        AnalyzeRecurse: false
        AnalyzeVerbose: true
    - bash: |
        gem install brakeman
        brakeman $(Build.SourcesDirectory)/otelcollector/configmapparser
      displayName: 'SDL: run brakeman'
    - task: Gosec@1
      displayName: 'SDL: run gosec'
      inputs:
        targetPattern: 'gosecPattern'
        targetGosecPattern: '$(Build.SourcesDirectory)/otelcollector'
    - bash: |
        mkdir -p $(Build.ArtifactStagingDirectory)/linux
        docker buildx create --name testbuilder
        docker buildx use testbuilder
        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
        if [ "$(Build.Reason)" != "PullRequest" ]; then
          docker buildx build . --file ./build/linux/Dockerfile -t $(LINUX_FULL_IMAGE_NAME) --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --push
          docker pull $(LINUX_FULL_IMAGE_NAME)
        else
          docker buildx build . --file ./build/linux/Dockerfile -t --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json
        fi
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: "Build and push image to dev ACR"
    - bash: |
        docker images --digests --all
      displayName: "List docker images"
    
    - task: ComponentGovernanceComponentDetection@0
      displayName: "SDL: Run component governance"
      condition: eq(variables.IS_PR, false)
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        dockerImagesToScan: '$(LINUX_FULL_IMAGE_NAME)'
        alertWarningLevel: 'High' 
    #- bash: |
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    #    trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 $(LINUX_FULL_IMAGE_NAME)
    #  displayName: 'Run trivy scan'
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: "Generate image artifacts for Ev2"
      condition: eq(variables.IS_PR, false)
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
        DockerImagesToScan: '$(LINUX_FULL_IMAGE_NAME)'
    - task: PublishBuildArtifacts@1
      displayName: "Publish image artifacts for Ev2"
      condition: eq(variables.IS_PR, false)
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

- job: Windows
  displayName: "Build windows image"
  pool:
    vmImage: windows-2019
  dependsOn: common
  variables:
    WINDOWS_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.WINDOWS_FULL_IMAGE_NAME'] ]
  steps:
    - powershell: |
        ./makefile_windows.ps1
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/opentelemetry-collector-builder/
      displayName: "Build otelcollector, promconfigvalidator, and fluent-bit plugin"
    - powershell: |
        docker build . --file ./build/windows/Dockerfile -t $(WINDOWS_FULL_IMAGE_NAME)
        New-Item -Path "$(Build.ArtifactStagingDirectory)" -Name "windows" -ItemType "directory"
        @{"image.name"="$(WINDOWS_FULL_IMAGE_NAME)"} | ConvertTo-Json -Compress | Out-File -Encoding ascii $(Build.ArtifactStagingDirectory)/windows/metadata.json
      workingDirectory: $(Build.SourcesDirectory)/otelcollector/
      displayName: "Build image"
    - powershell: |
        docker images --digests --all
      displayName: "List docker images"
    - powershell: |
        docker login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
        docker push $(WINDOWS_FULL_IMAGE_NAME)
      displayName: "Push image to dev ACR"
      condition: eq(variables.IS_PR, false)
    - task: ComponentGovernanceComponentDetection@0
      displayName: "Run component governance detection"
      condition: eq(variables.IS_PR, false)
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        dockerImagesToScan: '$(WINDOWS_FULL_IMAGE_NAME)'
        alertWarningLevel: 'High' 
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      condition: eq(variables.IS_PR, false)
      displayName: "Generate image artifacts for Ev2"
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)/windows'
        DockerImagesToScan: '$(WINDOWS_FULL_IMAGE_NAME)'
    - task: PublishBuildArtifacts@1
      condition: eq(variables.IS_PR, false)
      displayName: "Publish image artifacts for Ev2"
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

- job: Chart
  displayName: "Package helm chart"
  pool:
    vmImage: ubuntu-latest
  dependsOn:
  - Common
  - Linux
  - Windows
  variables:
    HELM_CHART_NAME: $[ dependencies.common.outputs['setup.HELM_CHART_NAME'] ]
    HELM_SEMVER: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG_WINDOWS: $[ dependencies.common.outputs['setup.WINDOWS_IMAGE_TAG'] ]
    HELM_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.HELM_FULL_IMAGE_NAME'] ]
  steps:
  - task: HelmInstaller@1
    displayName: Install Helm version
    inputs: 
      helmVersionToInstall: latest
  - bash: |
      envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/Chart.yaml && envsubst < $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values-template.yaml > $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/values.yaml
      helm version
    displayName: "Substitute chart version in Chart.yaml and values.yaml"
  - bash: |
      helm dep update
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/prometheus-collector/
    displayName: "Update helm dependencies"
  - bash: |
      helm package ./prometheus-collector/
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: "Package helm chart"
  - bash: |
      helm registry login containerinsightsprod.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)
      helm push $(HELM_CHART_NAME)-$(HELM_SEMVER).tgz oci://$(ACR_REGISTRY)$(ACR_REPOSITORY_HELM)
      mkdir -p $(Build.ArtifactStagingDirectory)/chart
      echo {\"image.name\":\"$(HELM_FULL_IMAGE_NAME)\"} > $(Build.ArtifactStagingDirectory)/chart/metadata.json
    workingDirectory: $(Build.SourcesDirectory)/otelcollector/deploy/chart/
    displayName: "Push helm chart to dev ACR"
    condition: eq(variables.IS_PR, false)
  - task: PublishBuildArtifacts@1
    displayName: "Publish helm chart artifacts for Ev2"
    condition: eq(variables.IS_PR, false)
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop

- job: Deploy
  displayName: "Deploy to dev clusters"
  pool:
    vmImage: ubuntu-latest
  condition: and(eq(variables.IS_PR, false), eq(variables.IS_MAIN_BRANCH, true))
  dependsOn:
  - Common
  - Chart
  variables:
    HELM_CHART_NAME: $[ dependencies.common.outputs['setup.HELM_CHART_NAME'] ]
    HELM_SEMVER: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG: $[ dependencies.common.outputs['setup.SEMVER'] ]
    IMAGE_TAG_WINDOWS: $[ dependencies.common.outputs['setup.WINDOWS_IMAGE_TAG'] ]
    HELM_FULL_IMAGE_NAME: $[ dependencies.common.outputs['setup.HELM_FULL_IMAGE_NAME'] ]
  steps:
  - checkout: self
    persistCredentials: true
  - bash: |
      git config --global user.name "AzureDevOps Agent"
      git tag "$(HELM_SEMVER)"
      git push origin "$(HELM_SEMVER)"
    displayName: Tag commit with semver
  - task: HelmInstaller@1
    displayName: Install Helm version
    inputs: 
      helmVersionToInstall: latest
  - bash: |
      for i in 1 2 3 4 5 6 7 8 9 10
          do
            sleep 30
            echo $(MCR_REGISTRY)$(MCR_REPOSITORY):$(IMAGE_TAG)
            echo $(MCR_REGISTRY)$(MCR_REPOSITORY_HELM):$(IMAGE_TAG)
            if docker manifest inspect $(MCR_REGISTRY)$(MCR_REPOSITORY):$(IMAGE_TAG) && docker manifest inspect $(MCR_REGISTRY)$(MCR_REPOSITORY_HELM):$(IMAGE_TAG)
            then
              echo "Images and chart are published to mcr"
              exit 0
            fi
          done
          echo "Images and chart are not published to mcr within 5 minutes"
          exit 1
      displayName: "Check images are pushed to dev MCR"
  - bash: |
      helm pull oci://$(MCR_REGISTRY)$(MCR_REPOSITORY_HELM) --version $(HELM_SEMVER)
    workingDirectory: $(Build.StagingDirectory)
    displayName: "Pull helm chart from dev MCR"
  - task: HelmDeploy@0
    displayName: "Deploy to ci-dev-aks-wcus cluster"
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)'
      azureResourceGroup: 'ci-dev-aks-wcus-rg'
      kubernetesCluster: 'ci-dev-aks-wcus'
      namespace: 'monitoring'
      command: 'upgrade'
      chartType: 'FilePath'
      chartPath: '$(Build.StagingDirectory)/$(HELM_CHART_NAME)-$(HELM_SEMVER).tgz'
      releaseName: 'prom-dev'
      waitForExecution: false
      arguments: '--dependency-update --set image.repository=$(MCR_REGISTRY)$(MCR_REPOSITORY) --set image.tag=$(IMAGE_TAG) --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set azureKeyVault.name="ci-prometheus-kv" --set azureKeyVault.pfxCertNames="{containerinsightsdevclusteraccountcert}" --set azureKeyVault.tenantId="72f988bf-86f1-41af-91ab-2d7cd011db47" --set clusterName="ci-dev-aks-wcus" --set azureMetricAccount.defaultAccountName="containerinsightsdevclusteraccount" --set azureKeyVault.clientId=$(CI_PROMETHEUS_KV_CLIENTID) --set azureKeyVault.clientSecret=$(CI_PROMETHEUS_KV_CLIENTSECRET) --set mode.advanced=true --set windowsDaemonset=true --set internalSettings.intEnvironment=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi"'
  - task: HelmDeploy@0
    displayName: "Deploy to ci-dev-aks-msi-eus2 cluster"
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)'
      azureResourceGroup: 'ci-dev-aks-msi-eus2-rg'
      kubernetesCluster: 'ci-dev-aks-msi-eus2'
      namespace: 'monitoring'
      command: 'upgrade'
      chartType: 'FilePath'
      chartPath: '$(Build.StagingDirectory)/$(HELM_CHART_NAME)-$(HELM_SEMVER).tgz'
      releaseName: 'prom-dev-msi'
      waitForExecution: false
      arguments: '--dependency-update --set image.repository=$(MCR_REGISTRY)$(MCR_REPOSITORY) --set image.tag=$(IMAGE_TAG) --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set azureKeyVault.name="ci-prometheus-kv" --set azureKeyVault.pfxCertNames="{containerinsightsdevclusteraccountcert}" --set azureKeyVault.tenantId="72f988bf-86f1-41af-91ab-2d7cd011db47" --set clusterName="ci-dev-aks-msi-eus2" --set azureMetricAccount.defaultAccountName="containerinsightsdevclusteraccount" --set azureKeyVault.useManagedIdentity=true --set mode.advanced=true --set windowsDaemonset=true --set internalSettings.intEnvironment=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi" --set minimalIngestionProfile="false"'
  - task: HelmDeploy@0
    displayName: "Deploy to ci-dev-aks-mac-eus cluster"
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'ContainerInsights_Build_Subscription(9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb)'
      azureResourceGroup: 'ci-dev-aks-mac-eus-rg'
      kubernetesCluster: 'ci-dev-aks-mac-eus'
      namespace: 'kube-system'
      command: 'upgrade'
      chartType: 'FilePath'
      chartPath: '$(Build.StagingDirectory)/$(HELM_CHART_NAME)-$(HELM_SEMVER).tgz'
      releaseName: 'prom-dev-mac'
      waitForExecution: false
      arguments: '--dependency-update --set image.repository=$(MCR_REGISTRY)$(MCR_REPOSITORY) --set image.tag=$(IMAGE_TAG) --set useMonitoringAccount=true --set scrapeTargets.windowsExporter=true --set scrapeTargets.windowsKubeProxy=true --set scrapeTargets.prometheusCollectorHealth=true --set mode.advanced=true --set windowsDaemonset=true --set resources.deployment.requests.cpu="300m" --set resources.deployment.requests.memory="1Gi" --set resources.daemonSet.requests.cpu="150m" --set resources.daemonSet.requests.memory="250Mi" --set azureResourceId="/subscriptions/9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb/resourcegroups/ci-dev-aks-mac-eus-rg/providers/Microsoft.ContainerService/managedClusters/ci-dev-aks-mac-eus" --set azureResourceRegion="eastus"'
