parameters:
- name: azureSubscription
  type: string
- name: resourceGroup
  type: string
- name: clusterName
  type: string
- name: actionGroupId
  type: string
- name: defaultParameters
  type: string

steps:
- task: AzureCLI@2
  displayName: "Deploy AKS cluster"
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      $clusterName = $('${{ parameters.clusterName }}').Trim()
      $resourceGroup = $('${{ parameters.resourceGroup }}').Trim()
      $actionGroupId = $('${{ parameters.actionGroupId }}').Trim()
      $defaultParms = $('${{ parameters.defaultParameters }}').Trim()

      $rg = (az group show -g $resourceGroup | convertfrom-json)
      if ($rg -eq $null) {
        throw "Resource group '$resourceGroup' not found"
      }
      write-host "Resource group '$($rg.name)' location '$($rg.location)'."

      $p = $defaultParms
      if ([string]::IsNullOrEmpty($p)) {
        $p = "{}"
      }
      "Default parameters: $p"
      $j = $p | convertfrom-json

      $parms = @(
        @{"name" = "clusterName";
          "value" = $clusterName},
        @{"name" = "actionGroupId";
          "value" = $actionGroupId},
        @{"name" = "azureMonitorWorkspaceLocation";
          "value" = $rg.location}
      )

      "Processing Parameters:"
      $parms | foreach {
          write-host "Name = $($_.name); Value = $($_.value)"

          if (![string]::IsNullOrEmpty($_.value.Trim())) {
            $n = [PSCustomObject]@{
              value = "$($_.value)"
            }

            "Updating parameter '$($_.name)' to '$($_.value)'"
            $j | Add-Member -name $_.name -MemberType NoteProperty -value $n -Force          
          }
      }

      $j | fl

      $parmFinal = ($j | convertto-json -Compress)
      $parmFinal = $parmFinal -replace """", "\"""
      "Final parameters: $parmFinal"

      az --version
      az account show
      az deployment group create `
          --resource-group $resourceGroup `
          --name ClusterDeployment `
          --template-file ".\otelcollector\test\ci-cd\ci-cd-cluster.json" `
          --parameters $parmFinal 
          